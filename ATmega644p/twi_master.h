#ifndef __TWI_MASTER_H__
#define __TWI_MASTER_H__
/* =============================================================================

    Copyright (c) 2006 Pieter Conradie [www.piconomic.co.za]
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    
    * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
    
    * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
    
    * Neither the name of the copyright holders nor the names of
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Title:          Interrupt-driven TWI (I2C) Master
    Author(s):      Pieter Conradie
    Creation Date:  2007-03-31
    Revision Info:  $Id: twi_master.h 116 2010-06-20 21:52:14Z pieterconradie $

============================================================================= */
/** 
 *  @ingroup AVR
 *  @defgroup TWI_MASTER twi_master.h : Interrupt-driven TWI (I2C) Master
 *
 *  This driver provides the ability to communicate with TWI (I2C) slaves.
 *
 *  Files: twi_master.h & twi_master.c
 *
 *  The TWI bus consists of two lines: Clock and Data with a strong pull-up 
 *  resistor (usually 4.7kOhm) on each. A logical 0 is signified by actively 
 *  pulling the line low (open collector output) and a logical 1 is signified by
 *  passively leaving the line high (hi-Z). Standard communication speed is up 
 *  to 100kHz and high speed is up to 400 kHz. The maximum communication speed 
 *  is affected by the line capacitance and EMI.
 *
 *  After every 8 bits of data transferred a 1 bit handshake is performed to 
 *  indicate success... an ACK is generated by pulling the line low (logical 0).
 *  A NACK is signified by leaving the line high (logical 1).
 *
 *  The TWI peripheral is a complicated state machine. Abbreviations of interest
 *  are:
 *  - MT : Master Transmitter
 *  - MR : Master Receiver
 *
 *  @par Example: 
 *  Extract from @ref M41T00
 *  @dontinclude rtc_M41T00.c
 *  @skip static bool_t m41t00_write_data(void)
 *  @until } // Doxygen end of example
 *
 *  @{
 */

/* _____STANDARD INCLUDES____________________________________________________ */

/* _____PROJECT INCLUDES_____________________________________________________ */
#include "common.h"

/* _____DEFINITIONS _________________________________________________________ */
/// Select TWI clock frequency
#define TWI_FREQUENCY_HZ 10000ul   // 100 kHz   PN 5 kHz for debugging

#define F_CPU 11095200

/**
 *  Support for REPEATED START condition.
 *
 *  If TWI_REPEATED_START_SUPPORT is defined as "1", then twi_stop()
 *  must be called after twi_start_tx() or twi_start_rx() to generate
 *  an explicit STOP condition. If it is not called, then a REPEATED START
 *  will be generated between successive calls to twi_start_tx() or
 *  twi_start_rx(). This is a method to reserve the bus in a multi-master
 *  situation until communication with the slave is finished.
 *
 *  See twi_stop().
*/
#define TWI_REPEATED_START_SUPPORT 0

/* _____TYPE DEFINITIONS_____________________________________________________ */

/* _____GLOBAL VARIABLES_____________________________________________________ */

/* _____GLOBAL FUNCTION DECLARATIONS_________________________________________ */
/**
 *  Initialise TWI peripheral.
 * 
 *  TWI bit rate is configured to #TWI_FREQUENCY_HZ
 * 
 */
extern void twi_init(void);

/*
#define debugBuffLen 30

char debugBuffer [debugBuffLen];

void checkDebugBuffer();
*/
/**
 *  Start TWI transmission.
 * 
 *  @param[in] adr              7-bit TWI Address of slave device
 *  @param[in] data             Pointer to buffer containing data to send
 *  @param[in] bytes_to_send    Number of bytes in buffer to send
 * 
 */
extern void twi_start_tx(u8_t adr, u8_t *data, u8_t bytes_to_send);

extern int8_t twi_synch_tx(u8_t adr, u8_t *data, u8_t bytes_to_send);
// PN 30. Aug. 2011 send and wait until send is completed
// can be helpful to know that message was received at the other end by return of the method
// mainly if other end handles event in application level synchronousely when message received


uint8_t twi_synch_rx(u8_t adr, u8_t *data, u8_t bytes_to_receive);

/**
 *  Start TWI reception.
 * 
 *  @param[in] adr              7-bit TWI Address of slave device
 *  @param[in] data             Pointer to buffer where received data must be stored
 *  @param[in] bytes_to_receive Number of bytes to receive
 * 
 */
extern void twi_start_rx(u8_t adr, u8_t *data, u8_t bytes_to_receive);

/**
 *  See if TWI is busy with transmission or reception.
 * 
 * @retval TRUE     TWI is busy
 * @retval FALSE    TWI is not busy (transmission or reception is finished)
 */
extern bool_t twi_busy(void);

/**
 *  See if transmission or reception was successful.
 * 
 *  This function should be called after twi_busy() returned FALSE.
 * 
 *  @retval TRUE    success
 *  @retval FALSE   error occured
 */
extern bool_t twi_success(void);

/**
 *  Get TWI STATUS for more diagnostic information.
 * 
 *  @return u8_t   TWI_STATUS value
 */
extern u8_t twi_get_status(void);

#if TWI_REPEATED_START_SUPPORT
/**
 *  Generate TWI STOP condition.
 * 
 *  This will release the TWI bus. It is useful in a multi-master
 *  scenario to reserve the bus until all communication is finished
 *  with a slave. Thereafter the bus is released so that another
 *  master may communicate with any slaves on the bus.
 * 
 */
extern void twi_stop(void);

#endif

/// TWI State machine value when finished
#define TWI_STATUS_DONE 0xff

int8_t  twiDataReceived;  // added by PN as an application event notification variable  30. Aug 2011
int8_t  twiDataSent;	// added by PN as an application event notification variable  30. Aug 2011



/* _____MACROS_______________________________________________________________ */

/**
 *  @}
 */
#endif

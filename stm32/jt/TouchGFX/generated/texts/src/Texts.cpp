/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x61, 0x75, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0, // @0 "auto calibration process"
    0x61, 0x75, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x65, 0x74, 0x75, 0x6e, 0x65, 0x20, 0x26, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x0, // @25 "auto finetune & continue"
    0x65, 0x64, 0x69, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @50 "edit Alarm Configuration"
    0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x0, // @75 "enter calibration values"
    0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @100 "calibrate zero position"
    0x65, 0x64, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x0, // @124 "edit calibration values"
    0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x0, // @148 "calibration procedure"
    0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x0, // @170 "deviation Voltage"
    0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @188 "needs calibration"
    0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x0, // @206 "state of process:"
    0x54, 0x72, 0x69, 0x61, 0x63, 0x20, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x0, // @224 "Triac Regulator"
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x0, // @240 "configure alarm"
    0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x0, // @256 "please wait ..."
    0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x0, // @272 "desired ampere"
    0x2, 0x0, // @287 "<>"
    0x7a, 0x65, 0x72, 0x6f, 0x20, 0x70, 0x6f, 0x74, 0x69, 0x20, 0x70, 0x6f, 0x73, 0x0, // @289 "zero poti pos"
    0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0, // @303 "Alarm config"
    0x6a, 0x6f, 0x62, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x0, // @316 "job complete"
    0x73, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6d, 0x3a, 0x73, 0x0, // @329 "set time m:s"
    0x62, 0x61, 0x63, 0x6b, 0x20, 0x26, 0x20, 0x73, 0x61, 0x76, 0x65, 0x0, // @342 "back & save"
    0x66, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0, // @354 "fatal error"
    0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x2e, 0x2e, 0x2e, 0x2e, 0x0, // @366 "startup...."
    0x74, 0x72, 0x69, 0x61, 0x63, 0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x0, // @378 "triac delay"
    0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x0, // @390 "alarm Time"
    0x63, 0x61, 0x6c, 0x69, 0x62, 0x20, 0x48, 0x69, 0x67, 0x68, 0x0, // @401 "calib High"
    0x65, 0x64, 0x69, 0x74, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x0, // @412 "edit Alarm"
    0x65, 0x64, 0x69, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x0, // @423 "edit calib"
    0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x0, // @434 "reasonText"
    0x73, 0x65, 0x74, 0x20, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x0, // @445 "set ampere"
    0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x0, // @456 "waiting..."
    0x61, 0x64, 0x63, 0x20, 0x56, 0x6f, 0x6c, 0x74, 0x73, 0x0, // @467 "adc Volts"
    0x63, 0x61, 0x6c, 0x69, 0x62, 0x20, 0x4c, 0x6f, 0x77, 0x0, // @477 "calib Low"
    0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x0, // @487 "calibrate"
    0x6d, 0x69, 0x6e, 0x75, 0x73, 0x20, 0x31, 0x30, 0x30, 0x0, // @497 "minus 100"
    0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x0, // @507 "ampere: "
    0x6d, 0x69, 0x6e, 0x75, 0x73, 0x20, 0x31, 0x30, 0x0, // @516 "minus 10"
    0x70, 0x6c, 0x75, 0x73, 0x20, 0x31, 0x30, 0x30, 0x0, // @525 "plus 100"
    0x6d, 0x69, 0x6e, 0x75, 0x73, 0x20, 0x31, 0x0, // @534 "minus 1"
    0x70, 0x6c, 0x75, 0x73, 0x20, 0x31, 0x30, 0x0, // @542 "plus 10"
    0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x0, // @550 "reason:"
    0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x0, // @558 "waiting"
    0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x0, // @566 "000.00"
    0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x0, // @573 "cancel"
    0x70, 0x6c, 0x75, 0x73, 0x20, 0x31, 0x0, // @580 "plus 1"
    0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x0, // @587 "return"
    0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0, // @594 "state:"
    0x30, 0x2e, 0x30, 0x30, 0x30, 0x0, // @601 "0.000"
    0x30, 0x30, 0x3a, 0x30, 0x30, 0x0, // @607 "00:00"
    0x61, 0x62, 0x6f, 0x72, 0x74, 0x0, // @613 "abort"
    0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0, // @619 "time:"
    0x30, 0x30, 0x30, 0x30, 0x0, // @625 "0000"
    0x61, 0x6d, 0x70, 0x73, 0x0, // @630 "amps"
    0x62, 0x61, 0x63, 0x6b, 0x0, // @635 "back"
    0x6f, 0x66, 0x66, 0x0 // @640 "off"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/mainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


mainScreenViewBase::mainScreenViewBase() :
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(190, 226, 247));

    configButton.setXY(734, 414);
    configButton.setBitmaps(touchgfx::Bitmap(BITMAP_CONFIGURATION_ID), touchgfx::Bitmap(BITMAP_CONFIGURATION_ID));
    configButton.setAction(buttonCallback);

    ampGauge.setBackground(touchgfx::Bitmap(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_BACKGROUND_STYLE_01_ID));
    ampGauge.setPosition(263, 133, 251, 251);
    ampGauge.setCenter(125, 125);
    ampGauge.setStartEndAngle(-85, 85);
    ampGauge.setRange(0, 100);
    ampGauge.setValue(50);
    ampGauge.setNeedle(BITMAP_BLUE_NEEDLES_ORIGINAL_GAUGE_NEEDLE_STYLE_01_ID, 11, 55);
    ampGauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    ampGauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    ampGauge.setArcVisible();
    ampGaugePainter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_FILL_STYLE_01_ID));
    ampGauge.getArc().setPainter(ampGaugePainter);
    ampGauge.getArc().setRadius(94);
    ampGauge.getArc().setLineWidth(14);
    ampGauge.getArc().setCapPrecision(180);
    ampGauge.setArcPosition(28, 30, 196, 88);

    dirtyBox.setPosition(315, 289, 150, 36);
    dirtyBox.setColor(touchgfx::Color::getColorFromRGB(229, 229, 229));

    ampsGaugeTitle.setPosition(349, 299, 83, 26);
    ampsGaugeTitle.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ampsGaugeTitle.setLinespacing(0);
    ampsGaugeTitle.setTypedText(touchgfx::TypedText(T_AMPSGAUGETITLE));

    timeValueText.setPosition(172, 11, 137, 49);
    timeValueText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    timeValueText.setLinespacing(0);
    Unicode::snprintf(timeValueTextBuffer, TIMEVALUETEXT_SIZE, "%s", touchgfx::TypedText(T_SETTIMEWILDCARD).getText());
    timeValueText.setWildcard(timeValueTextBuffer);
    timeValueText.setTypedText(touchgfx::TypedText(T_SETTIMETEXT));

    setTimeButton.setXY(0, 6);
    setTimeButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    setTimeButton.setLabelText(touchgfx::TypedText(T_SETTIMEMSBUTTONTEXT));
    setTimeButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setTimeButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setTimeButton.setAction(buttonCallback);

    startButton.setXY(139, 384);
    startButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_STARTBTN_ID), touchgfx::Bitmap(BITMAP_STARTBTNPRESSED_ID));
    startButton.setIconXY(0, 0);
    startButton.setAction(buttonCallback);

    stopButton.setXY(493, 384);
    stopButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_STOPBTNINACTIVE_ID), touchgfx::Bitmap(BITMAP_STOPBTNINACTIVE_ID));
    stopButton.setIconXY(0, 0);

    setAmpereButton.setXY(630, 6);
    setAmpereButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    setAmpereButton.setLabelText(touchgfx::TypedText(T_SETAMPEREBUTTONTEXT));
    setAmpereButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setAmpereButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    setAmpereButton.setAction(buttonCallback);

    ampereText.setXY(465, 12);
    ampereText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ampereText.setLinespacing(0);
    Unicode::snprintf(ampereTextBuffer, AMPERETEXT_SIZE, "%s", touchgfx::TypedText(T_AMPEREWILDCARD).getText());
    ampereText.setWildcard(ampereTextBuffer);
    ampereText.resizeToCurrentText();
    ampereText.setTypedText(touchgfx::TypedText(T_AMPERETEXT));

    add(__background);
    add(box1);
    add(configButton);
    add(ampGauge);
    add(dirtyBox);
    add(ampsGaugeTitle);
    add(timeValueText);
    add(setTimeButton);
    add(startButton);
    add(stopButton);
    add(setAmpereButton);
    add(ampereText);
}

void mainScreenViewBase::setupScreen()
{

}

void mainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &configButton)
    {
        //configButtonInteraction
        //When configButton clicked call virtual function
        //Call configButtonPressed
        configButtonPressed();
    }
    else if (&src == &setTimeButton)
    {
        //Interaction1
        //When setTimeButton clicked change screen to setTimeScreen
        //Go to setTimeScreen with no screen transition
        application().gotosetTimeScreenScreenNoTransition();
    }
    else if (&src == &startButton)
    {
        //Interaction6
        //When startButton clicked call virtual function
        //Call startButtonPressed
        startButtonPressed();
    }
    else if (&src == &setAmpereButton)
    {
        //Interaction2
        //When setAmpereButton clicked change screen to setAmpereScreen
        //Go to setAmpereScreen with no screen transition
        application().gotosetAmpereScreenScreenNoTransition();
    }
}

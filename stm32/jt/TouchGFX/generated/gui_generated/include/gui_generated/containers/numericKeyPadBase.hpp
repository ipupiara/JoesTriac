/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef NUMERICKEYPADBASE_HPP
#define NUMERICKEYPADBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>

class numericKeyPadBase : public touchgfx::Container
{
public:
    numericKeyPadBase();
    virtual ~numericKeyPadBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setNumPressedCallback(touchgfx::GenericCallback<uint8_t>& callback)
    {
        this->numPressedCallback = &callback;
    }

    /*
     * Virtual Action Handlers
     */
    virtual void button0Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button1Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button2Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button3Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button4Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button5Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button6Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button7Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button8Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

    virtual void button9Pressed()
    {
        // Override and implement this function in numericKeyPad
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitNumPressedCallback(uint8_t value)
    {
        if (numPressedCallback && numPressedCallback->isValid())
        {
            this->numPressedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::Button button1;
    touchgfx::Button button2;
    touchgfx::Button button3;
    touchgfx::Button button4;
    touchgfx::Button button5;
    touchgfx::Button button6;
    touchgfx::Button button7;
    touchgfx::Button button8;
    touchgfx::Button button9;
    touchgfx::Button button10;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<numericKeyPadBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<uint8_t>* numPressedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // NUMERICKEYPADBASE_HPP

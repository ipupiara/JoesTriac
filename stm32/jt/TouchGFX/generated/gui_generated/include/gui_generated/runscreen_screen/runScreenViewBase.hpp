/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef RUNSCREENVIEWBASE_HPP
#define RUNSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/runscreen_screen/runScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <gui/containers/GaugeWithGoal.hpp>
#include <gui/containers/astrolabiumContainer.hpp>
#include <gui/containers/pidDataGraphContainer.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class runScreenViewBase : public touchgfx::View<runScreenPresenter>
{
public:
    runScreenViewBase();
    virtual ~runScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void astroButtonPressed()
    {
        // Override and implement this function in runScreen
    }
    virtual void stopButtonPressed()
    {
        // Override and implement this function in runScreen
    }
    virtual void graphButtonClicked()
    {
        // Override and implement this function in runScreen
    }
    virtual void continueButtonClicked()
    {
        // Override and implement this function in runScreen
    }
    virtual void abortButtonPressed()
    {
        // Override and implement this function in runScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard timeValueText;
    touchgfx::ButtonWithIcon abortButton;
    touchgfx::ButtonWithIcon startButton;
    touchgfx::ButtonWithIcon continueButton;
    touchgfx::TextAreaWithOneWildcard setAmpereText;
    touchgfx::ButtonWithIcon stopButton;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea seconb4Title;
    touchgfx::TextArea textArea2;
    touchgfx::TextAreaWithOneWildcard currentTimeText;
    touchgfx::TextAreaWithOneWildcard currentAmpereText;
    touchgfx::BoxProgress boxProgress1;
    touchgfx::TextAreaWithOneWildcard secondsb4ReturnText;
    GaugeWithGoal ampGauge;
    touchgfx::ButtonWithIcon astroButton;
    astrolabiumContainer astrolabiumContainer1;
    pidDataGraphContainer pidDataGraphContainer1;
    touchgfx::ImageButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  graphButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TIMEVALUETEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar timeValueTextBuffer[TIMEVALUETEXT_SIZE];
    static const uint16_t SETAMPERETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar setAmpereTextBuffer[SETAMPERETEXT_SIZE];
    static const uint16_t CURRENTTIMETEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar currentTimeTextBuffer[CURRENTTIMETEXT_SIZE];
    static const uint16_t CURRENTAMPERETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar currentAmpereTextBuffer[CURRENTAMPERETEXT_SIZE];
    static const uint16_t SECONDSB4RETURNTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar secondsb4ReturnTextBuffer[SECONDSB4RETURNTEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<runScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<runScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // RUNSCREENVIEWBASE_HPP

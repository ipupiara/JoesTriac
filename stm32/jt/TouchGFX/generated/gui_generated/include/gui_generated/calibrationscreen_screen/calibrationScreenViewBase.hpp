/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CALIBRATIONSCREENVIEWBASE_HPP
#define CALIBRATIONSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/calibrationscreen_screen/calibrationScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class calibrationScreenViewBase : public touchgfx::View<calibrationScreenPresenter>
{
public:
    calibrationScreenViewBase();
    virtual ~calibrationScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void plus100ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void plus10ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void plus1ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void minus100ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void minus10ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void minus1ButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void abortButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void continueButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }
    virtual void skipButtonPressed()
    {
        // Override and implement this function in calibrationScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextArea textArea1;
    touchgfx::TextAreaWithOneWildcard ampereText;
    touchgfx::TextArea textArea3;
    touchgfx::TextAreaWithOneWildcard delayText;
    touchgfx::ButtonWithLabel plus100Button;
    touchgfx::ButtonWithLabel plus10Button;
    touchgfx::ButtonWithLabel plus1Button;
    touchgfx::ButtonWithLabel minus100Button;
    touchgfx::ButtonWithLabel minus10Button;
    touchgfx::ButtonWithLabel minus1Button;
    touchgfx::ButtonWithLabel abortButton;
    touchgfx::TextAreaWithOneWildcard adcVoltageText;
    touchgfx::TextArea textArea5;
    touchgfx::TextArea textArea6;
    touchgfx::TextAreaWithOneWildcard adcValueText;
    touchgfx::ButtonWithLabel continueButton;
    touchgfx::ButtonWithLabel skipButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t AMPERETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ampereTextBuffer[AMPERETEXT_SIZE];
    static const uint16_t DELAYTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar delayTextBuffer[DELAYTEXT_SIZE];
    static const uint16_t ADCVOLTAGETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar adcVoltageTextBuffer[ADCVOLTAGETEXT_SIZE];
    static const uint16_t ADCVALUETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar adcValueTextBuffer[ADCVALUETEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<calibrationScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // CALIBRATIONSCREENVIEWBASE_HPP

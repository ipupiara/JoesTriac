/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINSCREENVIEWBASE_HPP
#define MAINSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <gui/containers/GaugeWithGoal.hpp>

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void configButtonPressed()
    {
        // Override and implement this function in mainScreen
    }
    virtual void startButtonPressed()
    {
        // Override and implement this function in mainScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::Button configButton;
    touchgfx::Box dirtyBox;
    touchgfx::TextArea textArea1;
    touchgfx::TextAreaWithOneWildcard timeValueText;
    touchgfx::ButtonWithLabel setTimeButton;
    touchgfx::ButtonWithIcon startButton;
    touchgfx::ButtonWithIcon stopButton;
    touchgfx::ButtonWithLabel setAmpereButton;
    touchgfx::TextAreaWithOneWildcard ampereText;
    GaugeWithGoal gaugeWithGoal;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TIMEVALUETEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar timeValueTextBuffer[TIMEVALUETEXT_SIZE];
    static const uint16_t AMPERETEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ampereTextBuffer[AMPERETEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<mainScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MAINSCREENVIEWBASE_HPP


microSdNext-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f08  08007f08  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f10  08007f10  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000028  08007f40  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  08007f40  00020838  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eed9  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002839  00000000  00000000  0002ef2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  000323d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e403  00000000  00000000  00032ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012711  00000000  00000000  000612f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e8bb  00000000  00000000  00073a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001822bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  00182310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000028 	.word	0x20000028
 8000214:	00000000 	.word	0x00000000
 8000218:	08007dd4 	.word	0x08007dd4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000002c 	.word	0x2000002c
 8000234:	08007dd4 	.word	0x08007dd4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fb52 	bl	8000bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f85f 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f915 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 800055e:	f000 f8ed 	bl	800073c <MX_DMA_Init>
  MX_SDMMC2_SD_Init();
 8000562:	f000 f8c9 	bl	80006f8 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 8000566:	f004 fbbf 	bl	8004ce8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800056a:	2200      	movs	r2, #0
 800056c:	4922      	ldr	r1, [pc, #136]	; (80005f8 <main+0xac>)
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <main+0xb0>)
 8000570:	f006 fb5a 	bl	8006c28 <f_mount>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <main+0x34>
	{
		Error_Handler();
 800057a:	f000 f961 	bl	8000840 <Error_Handler>
 800057e:	e034      	b.n	80005ea <main+0x9e>
	}
	else
	{
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0xb4>)
 8000588:	2200      	movs	r2, #0
 800058a:	2107      	movs	r1, #7
 800058c:	481a      	ldr	r0, [pc, #104]	; (80005f8 <main+0xac>)
 800058e:	f006 ff6d 	bl	800746c <f_mkfs>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <main+0x52>
	    {
			Error_Handler();
 8000598:	f000 f952 	bl	8000840 <Error_Handler>
 800059c:	e025      	b.n	80005ea <main+0x9e>
	    }
		else
		{
			//Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800059e:	220a      	movs	r2, #10
 80005a0:	4918      	ldr	r1, [pc, #96]	; (8000604 <main+0xb8>)
 80005a2:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0xbc>)
 80005a4:	f006 fb86 	bl	8006cb4 <f_open>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <main+0x68>
			{
				Error_Handler();
 80005ae:	f000 f947 	bl	8000840 <Error_Handler>
 80005b2:	e01a      	b.n	80005ea <main+0x9e>
			}
			else
			{

				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <main+0xc0>)
 80005b6:	f7ff fe3f 	bl	8000238 <strlen>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0xc4>)
 80005be:	4913      	ldr	r1, [pc, #76]	; (800060c <main+0xc0>)
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0xbc>)
 80005c2:	f006 fd35 	bl	8007030 <f_write>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <main+0xc8>)
 80005cc:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK))
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xc4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <main+0x92>
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <main+0xc8>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <main+0x98>
				{
					Error_Handler();
 80005de:	f000 f92f 	bl	8000840 <Error_Handler>
 80005e2:	e002      	b.n	80005ea <main+0x9e>
				}
				else
				{

					f_close(&SDFile);
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <main+0xbc>)
 80005e6:	f006 ff16 	bl	8007416 <f_close>
				}
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <main+0xb0>)
 80005f0:	f006 fb1a 	bl	8006c28 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0xa8>
 80005f6:	bf00      	nop
 80005f8:	20000398 	.word	0x20000398
 80005fc:	2000039c 	.word	0x2000039c
 8000600:	20000190 	.word	0x20000190
 8000604:	08007dec 	.word	0x08007dec
 8000608:	200005cc 	.word	0x200005cc
 800060c:	20000000 	.word	0x20000000
 8000610:	2000018c 	.word	0x2000018c
 8000614:	20000188 	.word	0x20000188

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fbcc 	bl	8007dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <SystemClock_Config+0xd8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <SystemClock_Config+0xd8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <SystemClock_Config+0xd8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xdc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <SystemClock_Config+0xdc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000684:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800068e:	2308      	movs	r3, #8
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f9fa 	bl	8001a94 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006a6:	f000 f8cb 	bl	8000840 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006aa:	f001 f9a3 	bl	80019f4 <HAL_PWREx_EnableOverDrive>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006b4:	f000 f8c4 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2106      	movs	r1, #6
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fc8a 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006e2:	f000 f8ad 	bl	8000840 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MX_SDMMC2_SD_Init+0x40>)
 8000700:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 8000716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071a:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <MX_SDMMC2_SD_Init+0x3c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000044 	.word	0x20000044
 8000738:	40011c00 	.word	0x40011c00

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_DMA_Init+0x48>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <MX_DMA_Init+0x48>)
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_DMA_Init+0x48>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2038      	movs	r0, #56	; 0x38
 8000760:	f000 fba7 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000764:	2038      	movs	r0, #56	; 0x38
 8000766:	f000 fbc0 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2044      	movs	r0, #68	; 0x44
 8000770:	f000 fb9f 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000774:	2044      	movs	r0, #68	; 0x44
 8000776:	f000 fbb8 	bl	8000eea <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a19      	ldr	r2, [pc, #100]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0xb0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0xb0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <MX_GPIO_Init+0xb0>)
 8000804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_GPIO_Init+0xb0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xb4>)
 800082c:	f000 ff1e 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40022000 	.word	0x40022000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0b0      	sub	sp, #192	; 0xc0
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2290      	movs	r2, #144	; 0x90
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f007 fa85 	bl	8007dc4 <memset>
  if(hsd->Instance==SDMMC2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a84      	ldr	r2, [pc, #528]	; (8000ad0 <HAL_SD_MspInit+0x23c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	f040 8101 	bne.w	8000ac8 <HAL_SD_MspInit+0x234>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 80008c6:	f04f 6384 	mov.w	r3, #69206016	; 0x4200000
 80008ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fd39 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80008e8:	f7ff ffaa 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80008ec:	4b79      	ldr	r3, [pc, #484]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	4a78      	ldr	r2, [pc, #480]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 80008f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f6:	6453      	str	r3, [r2, #68]	; 0x44
 80008f8:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 80008fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b73      	ldr	r3, [pc, #460]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a72      	ldr	r2, [pc, #456]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
 8000910:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b6d      	ldr	r3, [pc, #436]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a6c      	ldr	r2, [pc, #432]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000934:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a66      	ldr	r2, [pc, #408]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 800093a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <HAL_SD_MspInit+0x240>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800094c:	2318      	movs	r3, #24
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000964:	230a      	movs	r3, #10
 8000966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800096e:	4619      	mov	r1, r3
 8000970:	4859      	ldr	r0, [pc, #356]	; (8000ad8 <HAL_SD_MspInit+0x244>)
 8000972:	f000 fe7b 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000976:	23c0      	movs	r3, #192	; 0xc0
 8000978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800098e:	230b      	movs	r3, #11
 8000990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000998:	4619      	mov	r1, r3
 800099a:	4850      	ldr	r0, [pc, #320]	; (8000adc <HAL_SD_MspInit+0x248>)
 800099c:	f000 fe66 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80009a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80009ba:	230b      	movs	r3, #11
 80009bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009c4:	4619      	mov	r1, r3
 80009c6:	4846      	ldr	r0, [pc, #280]	; (8000ae0 <HAL_SD_MspInit+0x24c>)
 80009c8:	f000 fe50 	bl	800166c <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 80009cc:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <HAL_SD_MspInit+0x254>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 80009d2:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009d4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80009d8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ec:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 80009f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a00:	2220      	movs	r2, #32
 8000a02:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a0a:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8000a26:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a28:	f000 fa7a 	bl	8000f20 <HAL_DMA_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_SD_MspInit+0x1a2>
    {
      Error_Handler();
 8000a32:	f7ff ff05 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a3c:	4a29      	ldr	r2, [pc, #164]	; (8000ae4 <HAL_SD_MspInit+0x250>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a44:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <HAL_SD_MspInit+0x25c>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a4a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a52:	2240      	movs	r2, #64	; 0x40
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a76:	2220      	movs	r2, #32
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a88:	2203      	movs	r2, #3
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8000a9c:	4813      	ldr	r0, [pc, #76]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000a9e:	f000 fa3f 	bl	8000f20 <HAL_DMA_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_SD_MspInit+0x218>
    {
      Error_Handler();
 8000aa8:	f7ff feca 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_SD_MspInit+0x258>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2067      	movs	r0, #103	; 0x67
 8000abe:	f000 f9f8 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8000ac2:	2067      	movs	r0, #103	; 0x67
 8000ac4:	f000 fa11 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	37c0      	adds	r7, #192	; 0xc0
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40011c00 	.word	0x40011c00
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	200000c8 	.word	0x200000c8
 8000ae8:	40026410 	.word	0x40026410
 8000aec:	20000128 	.word	0x20000128
 8000af0:	40026488 	.word	0x40026488

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f898 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <DMA2_Stream0_IRQHandler+0x10>)
 8000b4e:	f000 fb17 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000c8 	.word	0x200000c8

08000b5c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA2_Stream5_IRQHandler+0x10>)
 8000b62:	f000 fb0d 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000128 	.word	0x20000128

08000b70 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <SDMMC2_IRQHandler+0x10>)
 8000b76:	f002 fa95 	bl	80030a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000044 	.word	0x20000044

08000b84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f007 f8d1 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fcb7 	bl	800054c <main>
  bx  lr    
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000bec:	08007f18 	.word	0x08007f18
  ldr r2, =_sbss
 8000bf0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000bf4:	20000838 	.word	0x20000838

08000bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>

08000bfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f94c 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	200f      	movs	r0, #15
 8000c06:	f000 f805 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0a:	f7ff fe1f 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f967 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f92f 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000001c 	.word	0x2000001c
 8000c6c:	20000024 	.word	0x20000024
 8000c70:	20000020 	.word	0x20000020

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000024 	.word	0x20000024
 8000c98:	20000390 	.word	0x20000390

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000390 	.word	0x20000390

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000024 	.word	0x20000024

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff feb6 	bl	8000c9c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e099      	b.n	8001070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5c:	e00f      	b.n	8000f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5e:	f7ff fe9d 	bl	8000c9c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d908      	bls.n	8000f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e078      	b.n	8001070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e8      	bne.n	8000f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_DMA_Init+0x158>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d107      	bne.n	8000fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f023 0307 	bic.w	r3, r3, #7
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4313      	orrs	r3, r2
 8001008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	2b04      	cmp	r3, #4
 8001010:	d117      	bne.n	8001042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00e      	beq.n	8001042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 faa5 	bl	8001574 <DMA_CheckFifoParam>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800103e:	2301      	movs	r3, #1
 8001040:	e016      	b.n	8001070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fa5c 	bl	8001508 <DMA_CalcBaseAndBitshift>
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	223f      	movs	r2, #63	; 0x3f
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	e010803f 	.word	0xe010803f

0800107c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_DMA_Start_IT+0x26>
 800109e:	2302      	movs	r3, #2
 80010a0:	e048      	b.n	8001134 <HAL_DMA_Start_IT+0xb8>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d137      	bne.n	8001126 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2202      	movs	r2, #2
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 f9ee 	bl	80014ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d4:	223f      	movs	r2, #63	; 0x3f
 80010d6:	409a      	lsls	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0216 	orr.w	r2, r2, #22
 80010ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0208 	orr.w	r2, r2, #8
 8001112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e005      	b.n	8001132 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800112e:	2302      	movs	r3, #2
 8001130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001132:	7dfb      	ldrb	r3, [r7, #23]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d004      	beq.n	800115a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00c      	b.n	8001174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800118c:	4b8e      	ldr	r3, [pc, #568]	; (80013c8 <HAL_DMA_IRQHandler+0x248>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a8e      	ldr	r2, [pc, #568]	; (80013cc <HAL_DMA_IRQHandler+0x24c>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0a9b      	lsrs	r3, r3, #10
 8001198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	2208      	movs	r2, #8
 80011ac:	409a      	lsls	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d01a      	beq.n	80011ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0204 	bic.w	r2, r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d8:	2208      	movs	r2, #8
 80011da:	409a      	lsls	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d012      	beq.n	8001222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	2201      	movs	r2, #1
 8001210:	409a      	lsls	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121a:	f043 0202 	orr.w	r2, r3, #2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2204      	movs	r2, #4
 8001228:	409a      	lsls	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2204      	movs	r2, #4
 8001246:	409a      	lsls	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	f043 0204 	orr.w	r2, r3, #4
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2210      	movs	r2, #16
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d03c      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2210      	movs	r2, #16
 800127c:	409a      	lsls	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d018      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d024      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	4798      	blx	r3
 80012ae:	e01f      	b.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
 80012c0:	e016      	b.n	80012f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0208 	bic.w	r2, r2, #8
 80012de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f4:	2220      	movs	r2, #32
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 808f 	beq.w	8001420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8087 	beq.w	8001420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	2220      	movs	r2, #32
 8001318:	409a      	lsls	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b05      	cmp	r3, #5
 8001328:	d136      	bne.n	8001398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0216 	bic.w	r2, r2, #22
 8001338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <HAL_DMA_IRQHandler+0x1da>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0208 	bic.w	r2, r2, #8
 8001368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	223f      	movs	r2, #63	; 0x3f
 8001370:	409a      	lsls	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	2b00      	cmp	r3, #0
 800138c:	d07e      	beq.n	800148c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
        }
        return;
 8001396:	e079      	b.n	800148c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01d      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10d      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d031      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
 80013c4:	e02c      	b.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
 80013c6:	bf00      	nop
 80013c8:	2000001c 	.word	0x2000001c
 80013cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
 80013e0:	e01e      	b.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0210 	bic.w	r2, r2, #16
 80013fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2b00      	cmp	r3, #0
 8001426:	d032      	beq.n	800148e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d022      	beq.n	800147a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2205      	movs	r2, #5
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	d307      	bcc.n	8001468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f2      	bne.n	800144c <HAL_DMA_IRQHandler+0x2cc>
 8001466:	e000      	b.n	800146a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	e000      	b.n	800148e <HAL_DMA_IRQHandler+0x30e>
        return;
 800148c:	bf00      	nop
    }
  }
}
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b40      	cmp	r3, #64	; 0x40
 80014d8:	d108      	bne.n	80014ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ea:	e007      	b.n	80014fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3b10      	subs	r3, #16
 8001518:	4a13      	ldr	r2, [pc, #76]	; (8001568 <DMA_CalcBaseAndBitshift+0x60>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <DMA_CalcBaseAndBitshift+0x64>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d908      	bls.n	8001548 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <DMA_CalcBaseAndBitshift+0x68>)
 800153e:	4013      	ands	r3, r2
 8001540:	1d1a      	adds	r2, r3, #4
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58
 8001546:	e006      	b.n	8001556 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <DMA_CalcBaseAndBitshift+0x68>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	aaaaaaab 	.word	0xaaaaaaab
 800156c:	08007e4c 	.word	0x08007e4c
 8001570:	fffffc00 	.word	0xfffffc00

08001574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11f      	bne.n	80015ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d856      	bhi.n	8001642 <DMA_CheckFifoParam+0xce>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DMA_CheckFifoParam+0x28>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015bf 	.word	0x080015bf
 80015a4:	080015ad 	.word	0x080015ad
 80015a8:	08001643 	.word	0x08001643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d046      	beq.n	8001646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015bc:	e043      	b.n	8001646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c6:	d140      	bne.n	800164a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015cc:	e03d      	b.n	800164a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d6:	d121      	bne.n	800161c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d837      	bhi.n	800164e <DMA_CheckFifoParam+0xda>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <DMA_CheckFifoParam+0x70>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	080015fb 	.word	0x080015fb
 80015ec:	080015f5 	.word	0x080015f5
 80015f0:	0800160d 	.word	0x0800160d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e030      	b.n	800165c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d025      	beq.n	8001652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800160a:	e022      	b.n	8001652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001614:	d11f      	bne.n	8001656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800161a:	e01c      	b.n	8001656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d903      	bls.n	800162a <DMA_CheckFifoParam+0xb6>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d003      	beq.n	8001630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001628:	e018      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      break;
 800162e:	e015      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
      break;
 8001640:	e00b      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001642:	bf00      	nop
 8001644:	e00a      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
 8001648:	e008      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800164a:	bf00      	nop
 800164c:	e006      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800164e:	bf00      	nop
 8001650:	e004      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;   
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
    }
  } 
  
  return status; 
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e175      	b.n	8001978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8164 	bne.w	8001972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <HAL_GPIO_Init+0x56>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b03      	cmp	r3, #3
 800172e:	d017      	beq.n	8001760 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80be 	beq.w	8001972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800180e:	4a61      	ldr	r2, [pc, #388]	; (8001994 <HAL_GPIO_Init+0x328>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d037      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_GPIO_Init+0x330>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d031      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d02b      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x338>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x33c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a53      	ldr	r2, [pc, #332]	; (80019ac <HAL_GPIO_Init+0x340>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x22a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x344>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x226>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x348>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x222>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x21e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x350>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x21a>
 8001882:	2309      	movs	r3, #9
 8001884:	e012      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001886:	230a      	movs	r3, #10
 8001888:	e010      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188a:	2308      	movs	r3, #8
 800188c:	e00e      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188e:	2307      	movs	r3, #7
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001892:	2306      	movs	r3, #6
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018bc:	4935      	ldr	r1, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x328>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae86 	bls.w	800168c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40021c00 	.word	0x40021c00
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40022400 	.word	0x40022400
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a22:	f7ff f93b 	bl	8000c9c <HAL_GetTick>
 8001a26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a28:	e009      	b.n	8001a3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a2a:	f7ff f937 	bl	8000c9c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a38:	d901      	bls.n	8001a3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e022      	b.n	8001a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff f920 	bl	8000c9c <HAL_GetTick>
 8001a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a5e:	e009      	b.n	8001a74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a60:	f7ff f91c 	bl	8000c9c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6e:	d901      	bls.n	8001a74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e007      	b.n	8001a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a80:	d1ee      	bne.n	8001a60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e29b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac4:	4b93      	ldr	r3, [pc, #588]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62>
 8001ad0:	4b90      	ldr	r3, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b8d      	ldr	r3, [pc, #564]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x130>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d168      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e275      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x7a>
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a83      	ldr	r2, [pc, #524]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x9c>
 8001b16:	4b7f      	ldr	r3, [pc, #508]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7e      	ldr	r2, [pc, #504]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xc0>
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a72      	ldr	r2, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b54:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f892 	bl	8000c9c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f88e 	bl	8000c9c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e229      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe8>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f87e 	bl	8000c9c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f87a 	bl	8000c9c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e215      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x110>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d069      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x190>
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x17a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1e9      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	493d      	ldr	r1, [pc, #244]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e040      	b.n	8001ca6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d023      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a38      	ldr	r2, [pc, #224]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f830 	bl	8000c9c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f82c 	bl	8000c9c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4929      	ldr	r1, [pc, #164]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f80c 	bl	8000c9c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff f808 	bl	8000c9c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1a3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d038      	beq.n	8001d24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7fe ffe9 	bl	8000c9c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7fe ffe5 	bl	8000c9c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e180      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x23a>
 8001cec:	e01a      	b.n	8001d24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ffcf 	bl	8000c9c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7fe ffcb 	bl	8000c9c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d903      	bls.n	8001d18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e166      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
 8001d14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a4 	beq.w	8001e7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a88      	ldr	r2, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b86      	ldr	r3, [pc, #536]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_RCC_OscConfig+0x4d4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d66:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <HAL_RCC_OscConfig+0x4d4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7f      	ldr	r2, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x4d4>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7fe ff93 	bl	8000c9c <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7fe ff8f 	bl	8000c9c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e12a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x4d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x31a>
 8001da0:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	e02d      	b.n	8001e0a <HAL_RCC_OscConfig+0x376>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x33c>
 8001db6:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	e01c      	b.n	8001e0a <HAL_RCC_OscConfig+0x376>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x35e>
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a5e      	ldr	r2, [pc, #376]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x376>
 8001df2:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7fe ff43 	bl	8000c9c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe ff3f 	bl	8000c9c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0d8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ee      	beq.n	8001e1a <HAL_RCC_OscConfig+0x386>
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7fe ff2d 	bl	8000c9c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe ff29 	bl	8000c9c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0c2      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80ae 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d06d      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d14b      	bne.n	8001f30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fefa 	bl	8000c9c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe fef6 	bl	8000c9c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e091      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	071b      	lsls	r3, r3, #28
 8001ef6:	491b      	ldr	r1, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fec8 	bl	8000c9c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe fec4 	bl	8000c9c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e05f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x47c>
 8001f2e:	e057      	b.n	8001fe0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe feae 	bl	8000c9c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe feaa 	bl	8000c9c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4b0>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x54c>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x558>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d030      	beq.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d119      	bne.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10f      	bne.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 020f 	bic.w	r2, r3, #15
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002072:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e4:	f7fe fdda 	bl	8000c9c <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fdd6 	bl	8000c9c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 020f 	bic.w	r2, r3, #15
 800212a:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1d0>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fd36 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	08007e3c 	.word	0x08007e3c
 80021c0:	2000001c 	.word	0x2000001c
 80021c4:	20000020 	.word	0x20000020

080021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021cc:	b090      	sub	sp, #64	; 0x40
 80021ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
 80021d4:	2300      	movs	r3, #0
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d00d      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	f200 80a1 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x16c>
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x34>
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fa:	e09b      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_GetSysClockFreq+0x184>)
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002200:	e09b      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_GetSysClockFreq+0x188>)
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002206:	e098      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002208:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	099b      	lsrs	r3, r3, #6
 8002224:	2200      	movs	r2, #0
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	627a      	str	r2, [r7, #36]	; 0x24
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002230:	2100      	movs	r1, #0
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_GetSysClockFreq+0x188>)
 8002234:	fb03 f201 	mul.w	r2, r3, r1
 8002238:	2300      	movs	r3, #0
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	4413      	add	r3, r2
 8002240:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_RCC_GetSysClockFreq+0x188>)
 8002242:	fba0 1202 	umull	r1, r2, r0, r2
 8002246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002248:	460a      	mov	r2, r1
 800224a:	62ba      	str	r2, [r7, #40]	; 0x28
 800224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224e:	4413      	add	r3, r2
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	2200      	movs	r2, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	61fa      	str	r2, [r7, #28]
 800225a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002262:	f7fd fff1 	bl	8000248 <__aeabi_uldivmod>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4613      	mov	r3, r2
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226e:	e053      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	2200      	movs	r2, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	617a      	str	r2, [r7, #20]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002282:	f04f 0b00 	mov.w	fp, #0
 8002286:	4652      	mov	r2, sl
 8002288:	465b      	mov	r3, fp
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	ebb2 080a 	subs.w	r8, r2, sl
 80022a2:	eb63 090b 	sbc.w	r9, r3, fp
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ba:	ebb2 0408 	subs.w	r4, r2, r8
 80022be:	eb63 0509 	sbc.w	r5, r3, r9
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	00eb      	lsls	r3, r5, #3
 80022cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d0:	00e2      	lsls	r2, r4, #3
 80022d2:	4614      	mov	r4, r2
 80022d4:	461d      	mov	r5, r3
 80022d6:	eb14 030a 	adds.w	r3, r4, sl
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	eb45 030b 	adc.w	r3, r5, fp
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ee:	4629      	mov	r1, r5
 80022f0:	028b      	lsls	r3, r1, #10
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f8:	4621      	mov	r1, r4
 80022fa:	028a      	lsls	r2, r1, #10
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	2200      	movs	r2, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800230c:	f7fd ff9c 	bl	8000248 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_GetSysClockFreq+0x180>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002332:	e002      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetSysClockFreq+0x184>)
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800233c:	4618      	mov	r0, r3
 800233e:	3740      	adds	r7, #64	; 0x40
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	00f42400 	.word	0x00f42400
 8002350:	017d7840 	.word	0x017d7840

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002386:	6093      	str	r3, [r2, #8]
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	4964      	ldr	r1, [pc, #400]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d017      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ae:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	4959      	ldr	r1, [pc, #356]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023cc:	d101      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d017      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ea:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	494a      	ldr	r1, [pc, #296]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002408:	d101      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002416:	2301      	movs	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 808b 	beq.w	800254e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	4a39      	ldr	r2, [pc, #228]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002442:	6413      	str	r3, [r2, #64]	; 0x40
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fc1e 	bl	8000c9c <HAL_GetTick>
 8002460:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002464:	f7fe fc1a 	bl	8000c9c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e38f      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d035      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d02e      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024a0:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d114      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fbe2 	bl	8000c9c <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fbde 	bl	8000c9c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e351      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ee      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800250a:	d111      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800251a:	400b      	ands	r3, r1
 800251c:	4901      	ldr	r1, [pc, #4]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
 8002522:	e00b      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
 800252c:	0ffffcff 	.word	0x0ffffcff
 8002530:	4bac      	ldr	r3, [pc, #688]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4aab      	ldr	r2, [pc, #684]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002536:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800253a:	6093      	str	r3, [r2, #8]
 800253c:	4ba9      	ldr	r3, [pc, #676]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	49a6      	ldr	r1, [pc, #664]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254a:	4313      	orrs	r3, r2
 800254c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800255a:	4ba2      	ldr	r3, [pc, #648]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002560:	4aa0      	ldr	r2, [pc, #640]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002566:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800256a:	4b9e      	ldr	r3, [pc, #632]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	499b      	ldr	r1, [pc, #620]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002588:	4b96      	ldr	r3, [pc, #600]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	4993      	ldr	r1, [pc, #588]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025aa:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025b8:	498a      	ldr	r1, [pc, #552]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025cc:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025da:	4982      	ldr	r1, [pc, #520]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025ee:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4979      	ldr	r1, [pc, #484]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002610:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4971      	ldr	r1, [pc, #452]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002632:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f023 020c 	bic.w	r2, r3, #12
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002640:	4968      	ldr	r1, [pc, #416]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4960      	ldr	r1, [pc, #384]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	4957      	ldr	r1, [pc, #348]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002698:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	494f      	ldr	r1, [pc, #316]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	4946      	ldr	r1, [pc, #280]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	493e      	ldr	r1, [pc, #248]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	4935      	ldr	r1, [pc, #212]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272e:	492d      	ldr	r1, [pc, #180]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d011      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002750:	4924      	ldr	r1, [pc, #144]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800275c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	4914      	ldr	r1, [pc, #80]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b4:	490b      	ldr	r1, [pc, #44]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00f      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d8:	4902      	ldr	r1, [pc, #8]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027e0:	e002      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027f4:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	4986      	ldr	r1, [pc, #536]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002818:	4b81      	ldr	r3, [pc, #516]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002828:	497d      	ldr	r1, [pc, #500]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d006      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80d6 	beq.w	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a75      	ldr	r2, [pc, #468]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe fa24 	bl	8000c9c <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002858:	f7fe fa20 	bl	8000c9c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e195      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800286a:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d021      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11d      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289e:	0e1b      	lsrs	r3, r3, #24
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	019a      	lsls	r2, r3, #6
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	071b      	lsls	r3, r3, #28
 80028be:	4958      	ldr	r1, [pc, #352]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02e      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f0:	d129      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028f2:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	0f1b      	lsrs	r3, r3, #28
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	019a      	lsls	r2, r3, #6
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	493e      	ldr	r1, [pc, #248]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	f023 021f 	bic.w	r2, r3, #31
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	3b01      	subs	r3, #1
 800293e:	4938      	ldr	r1, [pc, #224]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01d      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002952:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002958:	0e1b      	lsrs	r3, r3, #24
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002966:	0f1b      	lsrs	r3, r3, #28
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	019a      	lsls	r2, r3, #6
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	071b      	lsls	r3, r3, #28
 8002986:	4926      	ldr	r1, [pc, #152]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d011      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	019a      	lsls	r2, r3, #6
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	071b      	lsls	r3, r3, #28
 80029b6:	491a      	ldr	r1, [pc, #104]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ca:	f7fe f967 	bl	8000c9c <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029d2:	f7fe f963 	bl	8000c9c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0d8      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 80ce 	bne.w	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe f94a 	bl	8000c9c <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a0c:	f7fe f946 	bl	8000c9c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d904      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0bb      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a24:	4b5e      	ldr	r3, [pc, #376]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a30:	d0ec      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12a      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a68:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	0f1b      	lsrs	r3, r3, #28
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	019a      	lsls	r2, r3, #6
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	071b      	lsls	r3, r3, #28
 8002a8e:	4944      	ldr	r1, [pc, #272]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	493d      	ldr	r1, [pc, #244]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d022      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac4:	d11d      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	0e1b      	lsrs	r3, r3, #24
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	0f1b      	lsrs	r3, r3, #28
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	019a      	lsls	r2, r3, #6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	071b      	lsls	r3, r3, #28
 8002afa:	4929      	ldr	r1, [pc, #164]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	0e1b      	lsrs	r3, r3, #24
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b1c:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	019a      	lsls	r2, r3, #6
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	071b      	lsls	r3, r3, #28
 8002b42:	4917      	ldr	r1, [pc, #92]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	4911      	ldr	r1, [pc, #68]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f896 	bl	8000c9c <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b74:	f7fe f892 	bl	8000c9c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e007      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b92:	d1ef      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e022      	b.n	8002bfc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd fe63 	bl	8000894 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f814 	bl	8002c04 <HAL_SD_InitCard>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00a      	b.n	8002bfc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002c20:	2376      	movs	r3, #118	; 0x76
 8002c22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681d      	ldr	r5, [r3, #0]
 8002c28:	466c      	mov	r4, sp
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f001 fadd 	bl	80041fc <SDMMC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e059      	b.n	8002d08 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c62:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fb11 	bl	8004290 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f7fe f818 	bl	8000cb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fff3 	bl	8003c70 <SD_PowerON>
 8002c8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e02e      	b.n	8002d08 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 ff12 	bl	8003ad4 <SD_InitCard>
 8002cb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01b      	b.n	8002d08 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fb6b 	bl	80043b4 <SDMMC_CmdBlockLength>
 8002cde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00f      	beq.n	8002d06 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_SD_InitCard+0x10c>)
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d10:	004005ff 	.word	0x004005ff

08002d14 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0c3      	b.n	8002ec4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f040 80bc 	bne.w	8002ec2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d907      	bls.n	8002d6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0aa      	b.n	8002ec4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2200      	movs	r2, #0
 8002da4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3380      	adds	r3, #128	; 0x80
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	f7fe f94d 	bl	800107c <HAL_DMA_Start_IT>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e055      	b.n	8002ec4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0208 	orr.w	r2, r2, #8
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d002      	beq.n	8002e36 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	025b      	lsls	r3, r3, #9
 8002e40:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002e42:	2390      	movs	r3, #144	; 0x90
 8002e44:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f107 0210 	add.w	r2, r7, #16
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fa7d 	bl	800435c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d90a      	bls.n	8002e7e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2282      	movs	r2, #130	; 0x82
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fae1 	bl	800443c <SDMMC_CmdReadMultiBlock>
 8002e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e7c:	e009      	b.n	8002e92 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2281      	movs	r2, #129	; 0x81
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fab4 	bl	80043f8 <SDMMC_CmdReadSingleBlock>
 8002e90:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d012      	beq.n	8002ebe <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e002      	b.n	8002ec4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	; 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	080038e3 	.word	0x080038e3
 8002ed0:	08003955 	.word	0x08003955
 8002ed4:	004005ff 	.word	0x004005ff

08002ed8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0c6      	b.n	800308e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 80bf 	bne.w	800308c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	441a      	add	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d907      	bls.n	8002f32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0ad      	b.n	800308e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2203      	movs	r2, #3
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 021a 	orr.w	r2, r2, #26
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	4a50      	ldr	r2, [pc, #320]	; (8003098 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	4a4f      	ldr	r2, [pc, #316]	; (800309c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2200      	movs	r2, #0
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d002      	beq.n	8002f78 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	025b      	lsls	r3, r3, #9
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d90a      	bls.n	8002f94 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	22a0      	movs	r2, #160	; 0xa0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 fa9a 	bl	80044c4 <SDMMC_CmdWriteMultiBlock>
 8002f90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f92:	e009      	b.n	8002fa8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2290      	movs	r2, #144	; 0x90
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 fa6d 	bl	8004480 <SDMMC_CmdWriteSingleBlock>
 8002fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e05c      	b.n	800308e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3380      	adds	r3, #128	; 0x80
 8003014:	461a      	mov	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	f7fe f82e 	bl	800107c <HAL_DMA_Start_IT>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01a      	beq.n	800305c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 021a 	bic.w	r2, r2, #26
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e018      	b.n	800308e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003068:	2390      	movs	r3, #144	; 0x90
 800306a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f107 0210 	add.w	r2, r7, #16
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f96a 	bl	800435c <SDMMC_ConfigData>

      return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	080038b9 	.word	0x080038b9
 800309c:	08003955 	.word	0x08003955
 80030a0:	004005ff 	.word	0x004005ff

080030a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_SD_IRQHandler+0x2e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 ffef 	bl	80040ae <SD_Read_IT>
 80030d0:	e15a      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 808d 	beq.w	80031fc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b9a      	ldr	r3, [pc, #616]	; (8003360 <HAL_SD_IRQHandler+0x2bc>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d039      	beq.n	800318a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_SD_IRQHandler+0x86>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f001 f9ea 	bl	8004508 <SDMMC_CmdStopTransfer>
 8003134:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f921 	bl	8003390 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f240 523a 	movw	r2, #1338	; 0x53a
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_SD_IRQHandler+0xd6>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 fe5a 	bl	8004e34 <HAL_SD_RxCpltCallback>
 8003180:	e102      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f001 fe4c 	bl	8004e20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003188:	e0fe      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80f9 	beq.w	8003388 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 f9af 	bl	8004508 <SDMMC_CmdStopTransfer>
 80031aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8e6 	bl	8003390 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 80dc 	bne.w	8003388 <HAL_SD_IRQHandler+0x2e4>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80d6 	bne.w	8003388 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0208 	bic.w	r2, r2, #8
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f001 fe13 	bl	8004e20 <HAL_SD_TxCpltCallback>
}
 80031fa:	e0c5      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_SD_IRQHandler+0x178>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 ff9b 	bl	8004150 <SD_Write_IT>
 800321a:	e0b5      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80ae 	beq.w	8003388 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	f043 0208 	orr.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f240 523a 	movw	r2, #1338	; 0x53a
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f928 	bl	8004508 <SDMMC_CmdStopTransfer>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f857 	bl	8003390 <HAL_SD_ErrorCallback>
}
 80032e2:	e051      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04c      	beq.n	8003388 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <HAL_SD_IRQHandler+0x25e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_SD_IRQHandler+0x2c0>)
 8003308:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd ff14 	bl	800113c <HAL_DMA_Abort_IT>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d036      	beq.n	8003388 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fb6a 	bl	80039f8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003324:	e030      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_SD_IRQHandler+0x296>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <HAL_SD_IRQHandler+0x2c4>)
 8003340:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd fef8 	bl	800113c <HAL_DMA_Abort_IT>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01a      	beq.n	8003388 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fb85 	bl	8003a66 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800335c:	e014      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
 800335e:	bf00      	nop
 8003360:	ffff3ec5 	.word	0xffff3ec5
 8003364:	080039f9 	.word	0x080039f9
 8003368:	08003a67 	.word	0x08003a67
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f001 fd43 	bl	8004e0c <HAL_SD_AbortCallback>
}
 8003386:	e7ff      	b.n	8003388 <HAL_SD_IRQHandler+0x2e4>
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b2:	0f9b      	lsrs	r3, r3, #30
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d0:	0e1b      	lsrs	r3, r3, #24
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	0d1b      	lsrs	r3, r3, #20
 8003406:	b29a      	uxth	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	b2da      	uxtb	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003422:	0bdb      	lsrs	r3, r3, #15
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	0b9b      	lsrs	r3, r3, #14
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	b2da      	uxtb	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	0b1b      	lsrs	r3, r3, #12
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2200      	movs	r2, #0
 800346a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d163      	bne.n	800353c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003478:	009a      	lsls	r2, r3, #2
 800347a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003484:	0f92      	lsrs	r2, r2, #30
 8003486:	431a      	orrs	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003490:	0edb      	lsrs	r3, r3, #27
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	b2da      	uxtb	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	0e1b      	lsrs	r3, r3, #24
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b4:	0d5b      	lsrs	r3, r3, #21
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	0bdb      	lsrs	r3, r3, #15
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	7e1b      	ldrb	r3, [r3, #24]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	3302      	adds	r3, #2
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	7a1b      	ldrb	r3, [r3, #8]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003528:	0a52      	lsrs	r2, r2, #9
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
 800353a:	e031      	b.n	80035a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	2b01      	cmp	r3, #1
 8003542:	d11d      	bne.n	8003580 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	3301      	adds	r3, #1
 8003560:	029a      	lsls	r2, r3, #10
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003574:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	661a      	str	r2, [r3, #96]	; 0x60
 800357e:	e00f      	b.n	80035a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_SD_GetCardCSD+0x344>)
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e09d      	b.n	80036dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	0b9b      	lsrs	r3, r3, #14
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	09db      	lsrs	r3, r3, #7
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	0fdb      	lsrs	r3, r3, #31
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	0f5b      	lsrs	r3, r3, #29
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	0e9b      	lsrs	r3, r3, #26
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	0d9b      	lsrs	r3, r3, #22
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	b2da      	uxtb	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	0d5b      	lsrs	r3, r3, #21
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	b2da      	uxtb	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	0bdb      	lsrs	r3, r3, #15
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	0b9b      	lsrs	r3, r3, #14
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	0b5b      	lsrs	r3, r3, #13
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	0b1b      	lsrs	r3, r3, #12
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	004005ff 	.word	0x004005ff

080036ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af04      	add	r7, sp, #16
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2203      	movs	r2, #3
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	2b03      	cmp	r3, #3
 8003762:	d02e      	beq.n	80037c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d106      	bne.n	800377a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
 8003778:	e029      	b.n	80037ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003780:	d10a      	bne.n	8003798 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb2a 	bl	8003ddc <SD_WideBus_Enable>
 8003788:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
 8003796:	e01a      	b.n	80037ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb67 	bl	8003e72 <SD_WideBus_Disable>
 80037a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
 80037b2:	e00c      	b.n	80037ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
 80037c0:	e005      	b.n	80037ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a26      	ldr	r2, [pc, #152]	; (8003874 <HAL_SD_ConfigWideBusOperation+0x130>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037ec:	e01f      	b.n	800382e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681d      	ldr	r5, [r3, #0]
 8003814:	466c      	mov	r4, sp
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800381e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fce7 	bl	80041fc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fdbc 	bl	80043b4 <SDMMC_CmdBlockLength>
 800383c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <HAL_SD_ConfigWideBusOperation+0x130>)
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800386a:	4618      	mov	r0, r3
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bdb0      	pop	{r4, r5, r7, pc}
 8003872:	bf00      	nop
 8003874:	004005ff 	.word	0x004005ff

08003878 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa7e 	bl	8003d8c <SD_SendStatus>
 8003890:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038ae:	693b      	ldr	r3, [r7, #16]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	2b82      	cmp	r3, #130	; 0x82
 80038f6:	d111      	bne.n	800391c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fe03 	bl	8004508 <SDMMC_CmdStopTransfer>
 8003902:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fd3a 	bl	8003390 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0208 	bic.w	r2, r2, #8
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f240 523a 	movw	r2, #1338	; 0x53a
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 fa75 	bl	8004e34 <HAL_SD_RxCpltCallback>
#endif
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fd96 	bl	8001494 <HAL_DMA_GetError>
 8003968:	4603      	mov	r3, r0
 800396a:	2b02      	cmp	r3, #2
 800396c:	d03e      	beq.n	80039ec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <SD_DMAError+0x36>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d12d      	bne.n	80039e6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <SD_DMAError+0xa0>)
 8003990:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff62 	bl	8003878 <HAL_SD_GetCardState>
 80039b4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d002      	beq.n	80039c2 <SD_DMAError+0x6e>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10a      	bne.n	80039d8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd9e 	bl	8004508 <SDMMC_CmdStopTransfer>
 80039cc:	4602      	mov	r2, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	431a      	orrs	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff fcd2 	bl	8003390 <HAL_SD_ErrorCallback>
#endif
  }
}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	004005ff 	.word	0x004005ff

080039f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff ff31 	bl	8003878 <HAL_SD_GetCardState>
 8003a16:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d002      	beq.n	8003a32 <SD_DMATxAbort+0x3a>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10a      	bne.n	8003a48 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fd66 	bl	8004508 <SDMMC_CmdStopTransfer>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f001 f9db 	bl	8004e0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003a56:	e002      	b.n	8003a5e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fc99 	bl	8003390 <HAL_SD_ErrorCallback>
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff fefa 	bl	8003878 <HAL_SD_GetCardState>
 8003a84:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d002      	beq.n	8003aa0 <SD_DMARxAbort+0x3a>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10a      	bne.n	8003ab6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fd2f 	bl	8004508 <SDMMC_CmdStopTransfer>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f001 f9a4 	bl	8004e0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003ac4:	e002      	b.n	8003acc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff fc62 	bl	8003390 <HAL_SD_ErrorCallback>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b094      	sub	sp, #80	; 0x50
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003adc:	2301      	movs	r3, #1
 8003ade:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fbe1 	bl	80042ac <SDMMC_GetPowerState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003af4:	e0b8      	b.n	8003c68 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d02f      	beq.n	8003b5e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fe0b 	bl	800471e <SDMMC_CmdSendCID>
 8003b08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	e0a9      	b.n	8003c68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fc0b 	bl	8004336 <SDMMC_GetResponse>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fc02 	bl	8004336 <SDMMC_GetResponse>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fbf9 	bl	8004336 <SDMMC_GetResponse>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	210c      	movs	r1, #12
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fbf0 	bl	8004336 <SDMMC_GetResponse>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d00d      	beq.n	8003b82 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f107 020e 	add.w	r2, r7, #14
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fe11 	bl	8004798 <SDMMC_CmdSetRelAdd>
 8003b76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <SD_InitCard+0xae>
    {
      return errorstate;
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	e072      	b.n	8003c68 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d036      	beq.n	8003bf8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fddb 	bl	800475a <SDMMC_CmdSendCSD>
 8003ba4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	e05b      	b.n	8003c68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fbbd 	bl	8004336 <SDMMC_GetResponse>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fbb4 	bl	8004336 <SDMMC_GetResponse>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2108      	movs	r1, #8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fbab 	bl	8004336 <SDMMC_GetResponse>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	210c      	movs	r1, #12
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fba2 	bl	8004336 <SDMMC_GetResponse>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fb99 	bl	8004336 <SDMMC_GetResponse>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0d1a      	lsrs	r2, r3, #20
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fbc6 	bl	80033a4 <HAL_SD_GetCardCSD>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c22:	e021      	b.n	8003c68 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	2200      	movs	r2, #0
 8003c30:	461c      	mov	r4, r3
 8003c32:	4615      	mov	r5, r2
 8003c34:	4622      	mov	r2, r4
 8003c36:	462b      	mov	r3, r5
 8003c38:	4608      	mov	r0, r1
 8003c3a:	f000 fc87 	bl	800454c <SDMMC_CmdSelDesel>
 8003c3e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <SD_InitCard+0x176>
  {
    return errorstate;
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	e00e      	b.n	8003c68 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	466c      	mov	r4, sp
 8003c52:	f103 0210 	add.w	r2, r3, #16
 8003c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c60:	4628      	mov	r0, r5
 8003c62:	f000 facb 	bl	80041fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3740      	adds	r7, #64	; 0x40
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}

08003c70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc82 	bl	8004592 <SDMMC_CmdGoIdleState>
 8003c8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	e072      	b.n	8003d80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fc95 	bl	80045ce <SDMMC_CmdOperCond>
 8003ca4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fc6b 	bl	8004592 <SDMMC_CmdGoIdleState>
 8003cbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <SD_PowerON+0x5e>
    {
      return errorstate;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	e05b      	b.n	8003d80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d137      	bne.n	8003d46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fc95 	bl	800460c <SDMMC_CmdAppCommand>
 8003ce2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02d      	beq.n	8003d46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cee:	e047      	b.n	8003d80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc88 	bl	800460c <SDMMC_CmdAppCommand>
 8003cfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <SD_PowerON+0x98>
    {
      return errorstate;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	e03b      	b.n	8003d80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	491e      	ldr	r1, [pc, #120]	; (8003d88 <SD_PowerON+0x118>)
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fc9e 	bl	8004650 <SDMMC_CmdAppOperCommand>
 8003d14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d20:	e02e      	b.n	8003d80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fb04 	bl	8004336 <SDMMC_GetResponse>
 8003d2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	0fdb      	lsrs	r3, r3, #31
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <SD_PowerON+0xcc>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <SD_PowerON+0xce>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]

    count++;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d802      	bhi.n	8003d56 <SD_PowerON+0xe6>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0cc      	beq.n	8003cf0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d902      	bls.n	8003d66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d64:	e00c      	b.n	8003d80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
 8003d76:	e002      	b.n	8003d7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	c1100000 	.word	0xc1100000

08003d8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003da0:	e018      	b.n	8003dd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fd13 	bl	80047da <SDMMC_CmdSendStatus>
 8003db4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	e009      	b.n	8003dd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fab5 	bl	8004336 <SDMMC_GetResponse>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fa9f 	bl	8004336 <SDMMC_GetResponse>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e02:	d102      	bne.n	8003e0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e08:	e02f      	b.n	8003e6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f879 	bl	8003f08 <SD_FindSCR>
 8003e16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	e023      	b.n	8003e6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01c      	beq.n	8003e66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 fbe7 	bl	800460c <SDMMC_CmdAppCommand>
 8003e3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e00f      	b.n	8003e6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fc21 	bl	8004698 <SDMMC_CmdBusWidth>
 8003e56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	e003      	b.n	8003e6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e001      	b.n	8003e6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fa54 	bl	8004336 <SDMMC_GetResponse>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e98:	d102      	bne.n	8003ea0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e9e:	e02f      	b.n	8003f00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f82e 	bl	8003f08 <SD_FindSCR>
 8003eac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	e023      	b.n	8003f00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01c      	beq.n	8003efc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f000 fb9c 	bl	800460c <SDMMC_CmdAppCommand>
 8003ed4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	e00f      	b.n	8003f00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fbd6 	bl	8004698 <SDMMC_CmdBusWidth>
 8003eec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	e003      	b.n	8003f00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e001      	b.n	8003f00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003efc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b08f      	sub	sp, #60	; 0x3c
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f12:	f7fc fec3 	bl	8000c9c <HAL_GetTick>
 8003f16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2108      	movs	r1, #8
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa40 	bl	80043b4 <SDMMC_CmdBlockLength>
 8003f34:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	e0b2      	b.n	80040a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 fb5d 	bl	800460c <SDMMC_CmdAppCommand>
 8003f52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	e0a3      	b.n	80040a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003f64:	2308      	movs	r3, #8
 8003f66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003f68:	2330      	movs	r3, #48	; 0x30
 8003f6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f107 0210 	add.w	r2, r7, #16
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f9ea 	bl	800435c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fba5 	bl	80046dc <SDMMC_CmdSendSCR>
 8003f92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02a      	beq.n	8003ff0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	e083      	b.n	80040a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00f      	beq.n	8003fcc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f107 0208 	add.w	r2, r7, #8
 8003fb8:	18d4      	adds	r4, r2, r3
 8003fba:	4608      	mov	r0, r1
 8003fbc:	f000 f94a 	bl	8004254 <SDMMC_ReadFIFO>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	6023      	str	r3, [r4, #0]
      index++;
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fca:	e006      	b.n	8003fda <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003fda:	f7fc fe5f 	bl	8000c9c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d102      	bne.n	8003ff0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003fea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fee:	e05a      	b.n	80040a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0cf      	beq.n	8003f9e <SD_FindSCR+0x96>
 8003ffe:	e000      	b.n	8004002 <SD_FindSCR+0xfa>
      break;
 8004000:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2208      	movs	r2, #8
 8004016:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004018:	2308      	movs	r3, #8
 800401a:	e044      	b.n	80040a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004032:	2302      	movs	r3, #2
 8004034:	e037      	b.n	80040a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2220      	movs	r2, #32
 800404a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800404c:	2320      	movs	r3, #32
 800404e:	e02a      	b.n	80040a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f240 523a 	movw	r2, #1338	; 0x53a
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	061a      	lsls	r2, r3, #24
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004066:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004070:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	601a      	str	r2, [r3, #0]
    scr++;
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	3304      	adds	r3, #4
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	061a      	lsls	r2, r3, #24
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800408e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004098:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0e1b      	lsrs	r3, r3, #24
 800409e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	373c      	adds	r7, #60	; 0x3c
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}

080040ae <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d03f      	beq.n	8004148 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e033      	b.n	8004136 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f8be 	bl	8004254 <SDMMC_ReadFIFO>
 80040d8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3b01      	subs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3b01      	subs	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3b01      	subs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b07      	cmp	r3, #7
 800413a:	d9c8      	bls.n	80040ce <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d043      	beq.n	80041f2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e037      	b.n	80041e0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3b01      	subs	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3b01      	subs	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	041a      	lsls	r2, r3, #16
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	061a      	lsls	r2, r3, #24
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f107 0208 	add.w	r2, r7, #8
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f84a 	bl	800426e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b07      	cmp	r3, #7
 80041e4:	d9c4      	bls.n	8004170 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 001c 	add.w	r0, r7, #28
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004212:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004214:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004216:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800421a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800421e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004222:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004226:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <SDMMC_Init+0x54>)
 8004234:	4013      	ands	r3, r2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	b004      	add	sp, #16
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	ffff8100 	.word	0xffff8100

08004254 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0303 	and.w	r3, r3, #3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80042ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80042f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <SDMMC_SendCommand+0x50>)
 8004300:	4013      	ands	r3, r2
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	fffff000 	.word	0xfffff000

0800431c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	b2db      	uxtb	r3, r3
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3314      	adds	r3, #20
 8004344:	461a      	mov	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	4413      	add	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
}  
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004382:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004388:	431a      	orrs	r2, r3
                       Data->DPSM);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800438e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0

}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043c2:	2310      	movs	r3, #16
 80043c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff74 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	2110      	movs	r1, #16
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa1a 	bl	8004820 <SDMMC_GetCmdResp1>
 80043ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ee:	69fb      	ldr	r3, [r7, #28]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004406:	2311      	movs	r3, #17
 8004408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff52 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	2111      	movs	r1, #17
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9f8 	bl	8004820 <SDMMC_GetCmdResp1>
 8004430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004432:	69fb      	ldr	r3, [r7, #28]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800444a:	2312      	movs	r3, #18
 800444c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800444e:	2340      	movs	r3, #64	; 0x40
 8004450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff ff30 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	2112      	movs	r1, #18
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9d6 	bl	8004820 <SDMMC_GetCmdResp1>
 8004474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004476:	69fb      	ldr	r3, [r7, #28]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800448e:	2318      	movs	r3, #24
 8004490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800449a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff ff0e 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	2118      	movs	r1, #24
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9b4 	bl	8004820 <SDMMC_GetCmdResp1>
 80044b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ba:	69fb      	ldr	r3, [r7, #28]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044d2:	2319      	movs	r3, #25
 80044d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044d6:	2340      	movs	r3, #64	; 0x40
 80044d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff feec 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	2119      	movs	r1, #25
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f992 	bl	8004820 <SDMMC_GetCmdResp1>
 80044fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044fe:	69fb      	ldr	r3, [r7, #28]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004514:	230c      	movs	r3, #12
 8004516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004518:	2340      	movs	r3, #64	; 0x40
 800451a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fecb 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <SDMMC_CmdStopTransfer+0x40>)
 8004534:	210c      	movs	r1, #12
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f972 	bl	8004820 <SDMMC_GetCmdResp1>
 800453c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800453e:	69fb      	ldr	r3, [r7, #28]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	05f5e100 	.word	0x05f5e100

0800454c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800455c:	2307      	movs	r3, #7
 800455e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004560:	2340      	movs	r3, #64	; 0x40
 8004562:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800456e:	f107 0310 	add.w	r3, r7, #16
 8004572:	4619      	mov	r1, r3
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fea7 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	2107      	movs	r1, #7
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f94d 	bl	8004820 <SDMMC_GetCmdResp1>
 8004586:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800458a:	4618      	mov	r0, r3
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fe86 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fb67 	bl	8004c90 <SDMMC_GetCmdError>
 80045c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80045d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80045da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80045dc:	2308      	movs	r3, #8
 80045de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80045e0:	2340      	movs	r3, #64	; 0x40
 80045e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fe67 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fafa 	bl	8004bf4 <SDMMC_GetCmdResp7>
 8004600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004602:	69fb      	ldr	r3, [r7, #28]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800461a:	2337      	movs	r3, #55	; 0x37
 800461c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800461e:	2340      	movs	r3, #64	; 0x40
 8004620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fe48 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	2137      	movs	r1, #55	; 0x37
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8ee 	bl	8004820 <SDMMC_GetCmdResp1>
 8004644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004646:	69fb      	ldr	r3, [r7, #28]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <SDMMC_CmdAppOperCommand+0x44>)
 800465e:	4313      	orrs	r3, r2
 8004660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004662:	2329      	movs	r3, #41	; 0x29
 8004664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800466e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004674:	f107 0308 	add.w	r3, r7, #8
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe24 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fa03 	bl	8004a8c <SDMMC_GetCmdResp3>
 8004686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004688:	69fb      	ldr	r3, [r7, #28]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	80100000 	.word	0x80100000

08004698 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80046a6:	2306      	movs	r3, #6
 80046a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046aa:	2340      	movs	r3, #64	; 0x40
 80046ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fe02 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	2106      	movs	r1, #6
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f8a8 	bl	8004820 <SDMMC_GetCmdResp1>
 80046d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046d2:	69fb      	ldr	r3, [r7, #28]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80046e8:	2333      	movs	r3, #51	; 0x33
 80046ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046ec:	2340      	movs	r3, #64	; 0x40
 80046ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff fde1 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	2133      	movs	r1, #51	; 0x33
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f887 	bl	8004820 <SDMMC_GetCmdResp1>
 8004712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004714:	69fb      	ldr	r3, [r7, #28]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800472a:	2302      	movs	r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800472e:	23c0      	movs	r3, #192	; 0xc0
 8004730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fdc0 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f957 	bl	80049fc <SDMMC_GetCmdResp2>
 800474e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004750:	69fb      	ldr	r3, [r7, #28]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b088      	sub	sp, #32
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004768:	2309      	movs	r3, #9
 800476a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800476c:	23c0      	movs	r3, #192	; 0xc0
 800476e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fda1 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f938 	bl	80049fc <SDMMC_GetCmdResp2>
 800478c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800478e:	69fb      	ldr	r3, [r7, #28]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047a6:	2303      	movs	r3, #3
 80047a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047aa:	2340      	movs	r3, #64	; 0x40
 80047ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fd82 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	2103      	movs	r1, #3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f99d 	bl	8004b08 <SDMMC_GetCmdResp6>
 80047ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047d0:	69fb      	ldr	r3, [r7, #28]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b088      	sub	sp, #32
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80047e8:	230d      	movs	r3, #13
 80047ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047ec:	2340      	movs	r3, #64	; 0x40
 80047ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fd61 	bl	80042c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	210d      	movs	r1, #13
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f807 	bl	8004820 <SDMMC_GetCmdResp1>
 8004812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004814:	69fb      	ldr	r3, [r7, #28]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	460b      	mov	r3, r1
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800482e:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <SDMMC_GetCmdResp1+0x1d0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a70      	ldr	r2, [pc, #448]	; (80049f4 <SDMMC_GetCmdResp1+0x1d4>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	0a5a      	lsrs	r2, r3, #9
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	61fa      	str	r2, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800484c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004850:	e0c9      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ef      	beq.n	8004842 <SDMMC_GetCmdResp1+0x22>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ea      	bne.n	8004842 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2204      	movs	r2, #4
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800487e:	2304      	movs	r3, #4
 8004880:	e0b1      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004894:	2301      	movs	r3, #1
 8004896:	e0a6      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22c5      	movs	r2, #197	; 0xc5
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff fd3c 	bl	800431c <SDMMC_GetCommandResponse>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d001      	beq.n	80048b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e099      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80048b2:	2100      	movs	r1, #0
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff fd3e 	bl	8004336 <SDMMC_GetResponse>
 80048ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <SDMMC_GetCmdResp1+0x1d8>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e08d      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da02      	bge.n	80048d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80048d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d4:	e087      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	e080      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	e079      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80048fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004900:	e071      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800490c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004910:	e069      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800491c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004920:	e061      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800492c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004930:	e059      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800493c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004940:	e051      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800494c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004950:	e049      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800495c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004960:	e041      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800496c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004970:	e039      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800497c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004980:	e031      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800498c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004990:	e029      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800499c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049a0:	e021      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80049ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049b0:	e019      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80049bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049c0:	e011      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80049cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049d0:	e009      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80049dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80049e0:	e001      	b.n	80049e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80049e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	2000001c 	.word	0x2000001c
 80049f4:	10624dd3 	.word	0x10624dd3
 80049f8:	fdffe008 	.word	0xfdffe008

080049fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <SDMMC_GetCmdResp2+0x88>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <SDMMC_GetCmdResp2+0x8c>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0a5b      	lsrs	r3, r3, #9
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a28:	e026      	b.n	8004a78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ef      	beq.n	8004a1a <SDMMC_GetCmdResp2+0x1e>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ea      	bne.n	8004a1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a56:	2304      	movs	r3, #4
 8004a58:	e00e      	b.n	8004a78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e003      	b.n	8004a78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	22c5      	movs	r2, #197	; 0xc5
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	2000001c 	.word	0x2000001c
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a94:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <SDMMC_GetCmdResp3+0x74>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <SDMMC_GetCmdResp3+0x78>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0a5b      	lsrs	r3, r3, #9
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	fb02 f303 	mul.w	r3, r2, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	60fa      	str	r2, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ab8:	e01b      	b.n	8004af2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <SDMMC_GetCmdResp3+0x1e>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ea      	bne.n	8004aaa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e003      	b.n	8004af2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	22c5      	movs	r2, #197	; 0xc5
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000001c 	.word	0x2000001c
 8004b04:	10624dd3 	.word	0x10624dd3

08004b08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	460b      	mov	r3, r1
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b16:	4b35      	ldr	r3, [pc, #212]	; (8004bec <SDMMC_GetCmdResp6+0xe4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a35      	ldr	r2, [pc, #212]	; (8004bf0 <SDMMC_GetCmdResp6+0xe8>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	1e5a      	subs	r2, r3, #1
 8004b30:	61fa      	str	r2, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b3a:	e052      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <SDMMC_GetCmdResp6+0x24>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ea      	bne.n	8004b2c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2204      	movs	r2, #4
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e03a      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e02f      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff fbca 	bl	800431c <SDMMC_GetCommandResponse>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	7afb      	ldrb	r3, [r7, #11]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d001      	beq.n	8004b96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e025      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	22c5      	movs	r2, #197	; 0xc5
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff fbc9 	bl	8004336 <SDMMC_GetResponse>
 8004ba4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e011      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bcc:	e009      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bdc:	e001      	b.n	8004be2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	2000001c 	.word	0x2000001c
 8004bf0:	10624dd3 	.word	0x10624dd3

08004bf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <SDMMC_GetCmdResp7+0x94>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <SDMMC_GetCmdResp7+0x98>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a5b      	lsrs	r3, r3, #9
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	60fa      	str	r2, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c20:	e02c      	b.n	8004c7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ef      	beq.n	8004c12 <SDMMC_GetCmdResp7+0x1e>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ea      	bne.n	8004c12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e014      	b.n	8004c7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e009      	b.n	8004c7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004c7a:	2300      	movs	r3, #0
  
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	2000001c 	.word	0x2000001c
 8004c8c:	10624dd3 	.word	0x10624dd3

08004c90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <SDMMC_GetCmdError+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <SDMMC_GetCmdError+0x54>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0a5b      	lsrs	r3, r3, #9
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e5a      	subs	r2, r3, #1
 8004cb2:	60fa      	str	r2, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cbc:	e009      	b.n	8004cd2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f1      	beq.n	8004cae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	22c5      	movs	r2, #197	; 0xc5
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	2000001c 	.word	0x2000001c
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004cec:	4904      	ldr	r1, [pc, #16]	; (8004d00 <MX_FATFS_Init+0x18>)
 8004cee:	4805      	ldr	r0, [pc, #20]	; (8004d04 <MX_FATFS_Init+0x1c>)
 8004cf0:	f003 f834 	bl	8007d5c <FATFS_LinkDriver>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <MX_FATFS_Init+0x20>)
 8004cfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000398 	.word	0x20000398
 8004d04:	08007e54 	.word	0x08007e54
 8004d08:	20000394 	.word	0x20000394

08004d0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004d26:	f000 f896 	bl	8004e56 <BSP_SD_IsDetected>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004d30:	2302      	movs	r3, #2
 8004d32:	e012      	b.n	8004d5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8004d34:	480b      	ldr	r0, [pc, #44]	; (8004d64 <BSP_SD_Init+0x48>)
 8004d36:	f7fd ff35 	bl	8002ba4 <HAL_SD_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8004d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d48:	4806      	ldr	r0, [pc, #24]	; (8004d64 <BSP_SD_Init+0x48>)
 8004d4a:	f7fe fcfb 	bl	8003744 <HAL_SD_ConfigWideBusOperation>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004d58:	79fb      	ldrb	r3, [r7, #7]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000044 	.word	0x20000044

08004d68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	4806      	ldr	r0, [pc, #24]	; (8004d98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004d80:	f7fd ffc8 	bl	8002d14 <HAL_SD_ReadBlocks_DMA>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000044 	.word	0x20000044

08004d9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	4806      	ldr	r0, [pc, #24]	; (8004dcc <BSP_SD_WriteBlocks_DMA+0x30>)
 8004db4:	f7fe f890 	bl	8002ed8 <HAL_SD_WriteBlocks_DMA>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000044 	.word	0x20000044

08004dd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <BSP_SD_GetCardState+0x1c>)
 8004dd6:	f7fe fd4f 	bl	8003878 <HAL_SD_GetCardState>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000044 	.word	0x20000044

08004df0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4803      	ldr	r0, [pc, #12]	; (8004e08 <BSP_SD_GetCardInfo+0x18>)
 8004dfc:	f7fe fc76 	bl	80036ec <HAL_SD_GetCardInfo>
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000044 	.word	0x20000044

08004e0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004e14:	f000 f818 	bl	8004e48 <BSP_SD_AbortCallback>
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004e28:	f000 f9a8 	bl	800517c <BSP_SD_WriteCpltCallback>
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004e3c:	f000 f9aa 	bl	8005194 <BSP_SD_ReadCpltCallback>
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0

}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004e60:	f000 f80c 	bl	8004e7c <BSP_PlatformIsDetected>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	b2db      	uxtb	r3, r3
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004e82:	2301      	movs	r3, #1
 8004e84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e8a:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <BSP_PlatformIsDetected+0x28>)
 8004e8c:	f7fc fd9a 	bl	80019c4 <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8004e96:	2300      	movs	r3, #0
 8004e98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40022000 	.word	0x40022000

08004ea8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004eb0:	f7fb fef4 	bl	8000c9c <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004eb6:	e006      	b.n	8004ec6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004eb8:	f7ff ff8a 	bl	8004dd0 <BSP_SD_GetCardState>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e009      	b.n	8004eda <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004ec6:	f7fb fee9 	bl	8000c9c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d8f0      	bhi.n	8004eb8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <SD_CheckStatus+0x38>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004ef4:	f7ff ff6c 	bl	8004dd0 <BSP_SD_GetCardState>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <SD_CheckStatus+0x38>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <SD_CheckStatus+0x38>)
 8004f0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <SD_CheckStatus+0x38>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b2db      	uxtb	r3, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000025 	.word	0x20000025

08004f20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004f2a:	f7ff fef7 	bl	8004d1c <BSP_SD_Init>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ffd4 	bl	8004ee4 <SD_CheckStatus>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <SD_initialize+0x34>)
 8004f42:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <SD_initialize+0x34>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000025 	.word	0x20000025

08004f58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ffbd 	bl	8004ee4 <SD_CheckStatus>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4603      	mov	r3, r0
 8004f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004f88:	f247 5030 	movw	r0, #30000	; 0x7530
 8004f8c:	f7ff ff8c 	bl	8004ea8 <SD_CheckStatusWithTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da01      	bge.n	8004f9a <SD_read+0x26>
  {
    return res;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	e03b      	b.n	8005012 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f7ff fee2 	bl	8004d68 <BSP_SD_ReadBlocks_DMA>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d132      	bne.n	8005010 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004faa:	4b1c      	ldr	r3, [pc, #112]	; (800501c <SD_read+0xa8>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004fb0:	f7fb fe74 	bl	8000c9c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004fb6:	bf00      	nop
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <SD_read+0xa8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <SD_read+0x5e>
 8004fc0:	f7fb fe6c 	bl	8000c9c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f247 522f 	movw	r2, #29999	; 0x752f
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d9f2      	bls.n	8004fb8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <SD_read+0xa8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
 8004fde:	e017      	b.n	8005010 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <SD_read+0xa8>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004fe6:	f7fb fe59 	bl	8000c9c <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004fec:	e007      	b.n	8004ffe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004fee:	f7ff feef 	bl	8004dd0 <BSP_SD_GetCardState>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <SD_read+0x8a>
          {
            res = RES_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004ffc:	e008      	b.n	8005010 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ffe:	f7fb fe4d 	bl	8000c9c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f247 522f 	movw	r2, #29999	; 0x752f
 800500c:	4293      	cmp	r3, r2
 800500e:	d9ee      	bls.n	8004fee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005010:	7dfb      	ldrb	r3, [r7, #23]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000800 	.word	0x20000800

08005020 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005034:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <SD_write+0xa8>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800503a:	f247 5030 	movw	r0, #30000	; 0x7530
 800503e:	f7ff ff33 	bl	8004ea8 <SD_CheckStatusWithTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	da01      	bge.n	800504c <SD_write+0x2c>
  {
    return res;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	e038      	b.n	80050be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	68b8      	ldr	r0, [r7, #8]
 8005052:	f7ff fea3 	bl	8004d9c <BSP_SD_WriteBlocks_DMA>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d12f      	bne.n	80050bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800505c:	f7fb fe1e 	bl	8000c9c <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005062:	bf00      	nop
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <SD_write+0xa8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <SD_write+0x5e>
 800506c:	f7fb fe16 	bl	8000c9c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f247 522f 	movw	r2, #29999	; 0x752f
 800507a:	4293      	cmp	r3, r2
 800507c:	d9f2      	bls.n	8005064 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <SD_write+0xa8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
 800508a:	e017      	b.n	80050bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800508c:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <SD_write+0xa8>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005092:	f7fb fe03 	bl	8000c9c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005098:	e007      	b.n	80050aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800509a:	f7ff fe99 	bl	8004dd0 <BSP_SD_GetCardState>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <SD_write+0x8a>
          {
            res = RES_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75fb      	strb	r3, [r7, #23]
            break;
 80050a8:	e008      	b.n	80050bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80050aa:	f7fb fdf7 	bl	8000c9c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d9ee      	bls.n	800509a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200007fc 	.word	0x200007fc

080050cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	; 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	603a      	str	r2, [r7, #0]
 80050d6:	71fb      	strb	r3, [r7, #7]
 80050d8:	460b      	mov	r3, r1
 80050da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80050e2:	4b25      	ldr	r3, [pc, #148]	; (8005178 <SD_ioctl+0xac>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <SD_ioctl+0x28>
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03c      	b.n	800516e <SD_ioctl+0xa2>

  switch (cmd)
 80050f4:	79bb      	ldrb	r3, [r7, #6]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d834      	bhi.n	8005164 <SD_ioctl+0x98>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <SD_ioctl+0x34>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005111 	.word	0x08005111
 8005104:	08005119 	.word	0x08005119
 8005108:	08005131 	.word	0x08005131
 800510c:	0800514b 	.word	0x0800514b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005116:	e028      	b.n	800516a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fe67 	bl	8004df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800512e:	e01c      	b.n	800516a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005130:	f107 030c 	add.w	r3, r7, #12
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fe5b 	bl	8004df0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	b29a      	uxth	r2, r3
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005148:	e00f      	b.n	800516a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fe4e 	bl	8004df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	0a5a      	lsrs	r2, r3, #9
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005162:	e002      	b.n	800516a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005164:	2304      	movs	r3, #4
 8005166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800516a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800516e:	4618      	mov	r0, r3
 8005170:	3730      	adds	r7, #48	; 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000025 	.word	0x20000025

0800517c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <BSP_SD_WriteCpltCallback+0x14>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	200007fc 	.word	0x200007fc

08005194 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <BSP_SD_ReadCpltCallback+0x14>)
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	20000800 	.word	0x20000800

080051ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <disk_status+0x30>)
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	79fa      	ldrb	r2, [r7, #7]
 80051c4:	4905      	ldr	r1, [pc, #20]	; (80051dc <disk_status+0x30>)
 80051c6:	440a      	add	r2, r1
 80051c8:	7a12      	ldrb	r2, [r2, #8]
 80051ca:	4610      	mov	r0, r2
 80051cc:	4798      	blx	r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2000082c 	.word	0x2000082c

080051e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	4a0d      	ldr	r2, [pc, #52]	; (8005228 <disk_initialize+0x48>)
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d111      	bne.n	800521c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <disk_initialize+0x48>)
 80051fc:	2101      	movs	r1, #1
 80051fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <disk_initialize+0x48>)
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	79fa      	ldrb	r2, [r7, #7]
 800520e:	4906      	ldr	r1, [pc, #24]	; (8005228 <disk_initialize+0x48>)
 8005210:	440a      	add	r2, r1
 8005212:	7a12      	ldrb	r2, [r2, #8]
 8005214:	4610      	mov	r0, r2
 8005216:	4798      	blx	r3
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	2000082c 	.word	0x2000082c

0800522c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <disk_read+0x3c>)
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	689c      	ldr	r4, [r3, #8]
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	4a07      	ldr	r2, [pc, #28]	; (8005268 <disk_read+0x3c>)
 800524c:	4413      	add	r3, r2
 800524e:	7a18      	ldrb	r0, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	47a0      	blx	r4
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]
  return res;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	2000082c 	.word	0x2000082c

0800526c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <disk_write+0x3c>)
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68dc      	ldr	r4, [r3, #12]
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <disk_write+0x3c>)
 800528c:	4413      	add	r3, r2
 800528e:	7a18      	ldrb	r0, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	47a0      	blx	r4
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]
  return res;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2000082c 	.word	0x2000082c

080052ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	603a      	str	r2, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
 80052b8:	460b      	mov	r3, r1
 80052ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <disk_ioctl+0x38>)
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	79fa      	ldrb	r2, [r7, #7]
 80052ca:	4906      	ldr	r1, [pc, #24]	; (80052e4 <disk_ioctl+0x38>)
 80052cc:	440a      	add	r2, r1
 80052ce:	7a10      	ldrb	r0, [r2, #8]
 80052d0:	79b9      	ldrb	r1, [r7, #6]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	4798      	blx	r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2000082c 	.word	0x2000082c

080052e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b21b      	sxth	r3, r3
 8005304:	4313      	orrs	r3, r2
 8005306:	b21b      	sxth	r3, r3
 8005308:	81fb      	strh	r3, [r7, #14]
	return rv;
 800530a:	89fb      	ldrh	r3, [r7, #14]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3303      	adds	r3, #3
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	3202      	adds	r2, #2
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	3201      	adds	r2, #1
 800533e:	7812      	ldrb	r2, [r2, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	7812      	ldrb	r2, [r2, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	887a      	ldrh	r2, [r7, #2]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	887b      	ldrh	r3, [r7, #2]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	1c53      	adds	r3, r2, #1
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6179      	str	r1, [r7, #20]
 8005412:	7812      	ldrb	r2, [r2, #0]
 8005414:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3b01      	subs	r3, #1
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f1      	bne.n	8005406 <mem_cpy+0x1a>
	}
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	617a      	str	r2, [r7, #20]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3b01      	subs	r3, #1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f3      	bne.n	800543e <mem_set+0x10>
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	; 0x24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	61fa      	str	r2, [r7, #28]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	61ba      	str	r2, [r7, #24]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	1acb      	subs	r3, r1, r3
 8005490:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	607b      	str	r3, [r7, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <mem_cmp+0x40>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0eb      	beq.n	800547c <mem_cmp+0x18>

	return r;
 80054a4:	697b      	ldr	r3, [r7, #20]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3724      	adds	r7, #36	; 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80054bc:	e002      	b.n	80054c4 <chk_chr+0x12>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3301      	adds	r3, #1
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <chk_chr+0x26>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d1f2      	bne.n	80054be <chk_chr+0xc>
	return *str;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	781b      	ldrb	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e029      	b.n	8005550 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80054fc:	4a27      	ldr	r2, [pc, #156]	; (800559c <chk_lock+0xb4>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	4413      	add	r3, r2
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01d      	beq.n	8005546 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800550a:	4a24      	ldr	r2, [pc, #144]	; (800559c <chk_lock+0xb4>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	4413      	add	r3, r2
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d116      	bne.n	800554a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <chk_lock+0xb4>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	4413      	add	r3, r2
 8005524:	3304      	adds	r3, #4
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800552c:	429a      	cmp	r2, r3
 800552e:	d10c      	bne.n	800554a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <chk_lock+0xb4>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4413      	add	r3, r2
 8005538:	3308      	adds	r3, #8
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005540:	429a      	cmp	r2, r3
 8005542:	d102      	bne.n	800554a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005544:	e007      	b.n	8005556 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d9d2      	bls.n	80054fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d109      	bne.n	8005570 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <chk_lock+0x80>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d101      	bne.n	800556c <chk_lock+0x84>
 8005568:	2300      	movs	r3, #0
 800556a:	e010      	b.n	800558e <chk_lock+0xa6>
 800556c:	2312      	movs	r3, #18
 800556e:	e00e      	b.n	800558e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d108      	bne.n	8005588 <chk_lock+0xa0>
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <chk_lock+0xb4>)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	4413      	add	r3, r2
 800557e:	330c      	adds	r3, #12
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005586:	d101      	bne.n	800558c <chk_lock+0xa4>
 8005588:	2310      	movs	r3, #16
 800558a:	e000      	b.n	800558e <chk_lock+0xa6>
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000080c 	.word	0x2000080c

080055a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	e002      	b.n	80055b2 <enq_lock+0x12>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d806      	bhi.n	80055c6 <enq_lock+0x26>
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <enq_lock+0x40>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	4413      	add	r3, r2
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f2      	bne.n	80055ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	2000080c 	.word	0x2000080c

080055e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e01f      	b.n	8005634 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80055f4:	4a41      	ldr	r2, [pc, #260]	; (80056fc <inc_lock+0x118>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d113      	bne.n	800562e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005606:	4a3d      	ldr	r2, [pc, #244]	; (80056fc <inc_lock+0x118>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	4413      	add	r3, r2
 800560e:	3304      	adds	r3, #4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005616:	429a      	cmp	r2, r3
 8005618:	d109      	bne.n	800562e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800561a:	4a38      	ldr	r2, [pc, #224]	; (80056fc <inc_lock+0x118>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	3308      	adds	r3, #8
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800562a:	429a      	cmp	r2, r3
 800562c:	d006      	beq.n	800563c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d9dc      	bls.n	80055f4 <inc_lock+0x10>
 800563a:	e000      	b.n	800563e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800563c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d132      	bne.n	80056aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e002      	b.n	8005650 <inc_lock+0x6c>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d806      	bhi.n	8005664 <inc_lock+0x80>
 8005656:	4a29      	ldr	r2, [pc, #164]	; (80056fc <inc_lock+0x118>)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f2      	bne.n	800564a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d101      	bne.n	800566e <inc_lock+0x8a>
 800566a:	2300      	movs	r3, #0
 800566c:	e040      	b.n	80056f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4922      	ldr	r1, [pc, #136]	; (80056fc <inc_lock+0x118>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	440b      	add	r3, r1
 800567a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	491e      	ldr	r1, [pc, #120]	; (80056fc <inc_lock+0x118>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	440b      	add	r3, r1
 8005688:	3304      	adds	r3, #4
 800568a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	491a      	ldr	r1, [pc, #104]	; (80056fc <inc_lock+0x118>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	440b      	add	r3, r1
 8005698:	3308      	adds	r3, #8
 800569a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800569c:	4a17      	ldr	r2, [pc, #92]	; (80056fc <inc_lock+0x118>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	4413      	add	r3, r2
 80056a4:	330c      	adds	r3, #12
 80056a6:	2200      	movs	r2, #0
 80056a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <inc_lock+0xe0>
 80056b0:	4a12      	ldr	r2, [pc, #72]	; (80056fc <inc_lock+0x118>)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4413      	add	r3, r2
 80056b8:	330c      	adds	r3, #12
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <inc_lock+0xe0>
 80056c0:	2300      	movs	r3, #0
 80056c2:	e015      	b.n	80056f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <inc_lock+0xf8>
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <inc_lock+0x118>)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	4413      	add	r3, r2
 80056d2:	330c      	adds	r3, #12
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	e001      	b.n	80056e0 <inc_lock+0xfc>
 80056dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e0:	4906      	ldr	r1, [pc, #24]	; (80056fc <inc_lock+0x118>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	440b      	add	r3, r1
 80056e8:	330c      	adds	r3, #12
 80056ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	2000080c 	.word	0x2000080c

08005700 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d825      	bhi.n	8005760 <dec_lock+0x60>
		n = Files[i].ctr;
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <dec_lock+0x74>)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	4413      	add	r3, r2
 800571c:	330c      	adds	r3, #12
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005728:	d101      	bne.n	800572e <dec_lock+0x2e>
 800572a:	2300      	movs	r3, #0
 800572c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <dec_lock+0x3a>
 8005734:	89fb      	ldrh	r3, [r7, #14]
 8005736:	3b01      	subs	r3, #1
 8005738:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800573a:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <dec_lock+0x74>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	4413      	add	r3, r2
 8005742:	330c      	adds	r3, #12
 8005744:	89fa      	ldrh	r2, [r7, #14]
 8005746:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d105      	bne.n	800575a <dec_lock+0x5a>
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <dec_lock+0x74>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	737b      	strb	r3, [r7, #13]
 800575e:	e001      	b.n	8005764 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005760:	2302      	movs	r3, #2
 8005762:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005764:	7b7b      	ldrb	r3, [r7, #13]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000080c 	.word	0x2000080c

08005778 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e010      	b.n	80057a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005786:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <clear_lock+0x44>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	4413      	add	r3, r2
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d105      	bne.n	80057a2 <clear_lock+0x2a>
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <clear_lock+0x44>)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4413      	add	r3, r2
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d9eb      	bls.n	8005786 <clear_lock+0xe>
	}
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	2000080c 	.word	0x2000080c

080057c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	78db      	ldrb	r3, [r3, #3]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d034      	beq.n	800583e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7858      	ldrb	r0, [r3, #1]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057e4:	2301      	movs	r3, #1
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	f7ff fd40 	bl	800526c <disk_write>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e022      	b.n	800583e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	d217      	bcs.n	800583e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	789b      	ldrb	r3, [r3, #2]
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	e010      	b.n	8005838 <sync_window+0x78>
					wsect += fs->fsize;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7858      	ldrb	r0, [r3, #1]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800582a:	2301      	movs	r3, #1
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	f7ff fd1d 	bl	800526c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3b01      	subs	r3, #1
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d8eb      	bhi.n	8005816 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d01b      	beq.n	8005898 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ffad 	bl	80057c0 <sync_window>
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d113      	bne.n	8005898 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7858      	ldrb	r0, [r3, #1]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800587a:	2301      	movs	r3, #1
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	f7ff fcd5 	bl	800522c <disk_read>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff87 	bl	80057c0 <sync_window>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d158      	bne.n	800596e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d148      	bne.n	8005956 <sync_fs+0xb2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	791b      	ldrb	r3, [r3, #4]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d144      	bne.n	8005956 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3330      	adds	r3, #48	; 0x30
 80058d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fda9 	bl	800542e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3330      	adds	r3, #48	; 0x30
 80058e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058e4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fd38 	bl	800535e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3330      	adds	r3, #48	; 0x30
 80058f2:	4921      	ldr	r1, [pc, #132]	; (8005978 <sync_fs+0xd4>)
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd4d 	bl	8005394 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3330      	adds	r3, #48	; 0x30
 80058fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005902:	491e      	ldr	r1, [pc, #120]	; (800597c <sync_fs+0xd8>)
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fd45 	bl	8005394 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3330      	adds	r3, #48	; 0x30
 800590e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7ff fd3b 	bl	8005394 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3330      	adds	r3, #48	; 0x30
 8005922:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7ff fd31 	bl	8005394 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7858      	ldrb	r0, [r3, #1]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	2301      	movs	r3, #1
 800594c:	f7ff fc8e 	bl	800526c <disk_write>
			fs->fsi_flag = 0;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2200      	movs	r2, #0
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fca4 	bl	80052ac <disk_ioctl>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <sync_fs+0xca>
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	41615252 	.word	0x41615252
 800597c:	61417272 	.word	0x61417272

08005980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3b02      	subs	r3, #2
 800598e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	3b02      	subs	r3, #2
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d301      	bcc.n	80059a0 <clust2sect+0x20>
 800599c:	2300      	movs	r3, #0
 800599e:	e008      	b.n	80059b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	895b      	ldrh	r3, [r3, #10]
 80059a4:	461a      	mov	r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	fb03 f202 	mul.w	r2, r3, r2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	4413      	add	r3, r2
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d904      	bls.n	80059de <get_fat+0x20>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80059de:	2301      	movs	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e08f      	b.n	8005b04 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d062      	beq.n	8005ab8 <get_fat+0xfa>
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	dc7c      	bgt.n	8005af0 <get_fat+0x132>
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d002      	beq.n	8005a00 <get_fat+0x42>
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d042      	beq.n	8005a84 <get_fat+0xc6>
 80059fe:	e077      	b.n	8005af0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	0a5b      	lsrs	r3, r3, #9
 8005a16:	4413      	add	r3, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6938      	ldr	r0, [r7, #16]
 8005a1c:	f7ff ff14 	bl	8005848 <move_window>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d167      	bne.n	8005af6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	4413      	add	r3, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	6938      	ldr	r0, [r7, #16]
 8005a48:	f7ff fefe 	bl	8005848 <move_window>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d153      	bne.n	8005afa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	461a      	mov	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <get_fat+0xbc>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	e002      	b.n	8005a80 <get_fat+0xc2>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	617b      	str	r3, [r7, #20]
			break;
 8005a82:	e03f      	b.n	8005b04 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	4413      	add	r3, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6938      	ldr	r0, [r7, #16]
 8005a92:	f7ff fed9 	bl	8005848 <move_window>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d130      	bne.n	8005afe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005aaa:	4413      	add	r3, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fc1b 	bl	80052e8 <ld_word>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	617b      	str	r3, [r7, #20]
			break;
 8005ab6:	e025      	b.n	8005b04 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	09db      	lsrs	r3, r3, #7
 8005ac0:	4413      	add	r3, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7ff febf 	bl	8005848 <move_window>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d118      	bne.n	8005b02 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ade:	4413      	add	r3, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fc19 	bl	8005318 <ld_dword>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005aec:	617b      	str	r3, [r7, #20]
			break;
 8005aee:	e009      	b.n	8005b04 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e006      	b.n	8005b04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b02:	bf00      	nop
		}
	}

	return val;
 8005b04:	697b      	ldr	r3, [r7, #20]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b0e:	b590      	push	{r4, r7, lr}
 8005b10:	b089      	sub	sp, #36	; 0x24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f240 80d2 	bls.w	8005cca <put_fat+0x1bc>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	f080 80cc 	bcs.w	8005cca <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	f000 8096 	beq.w	8005c68 <put_fat+0x15a>
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	f300 80cd 	bgt.w	8005cdc <put_fat+0x1ce>
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d002      	beq.n	8005b4c <put_fat+0x3e>
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d06e      	beq.n	8005c28 <put_fat+0x11a>
 8005b4a:	e0c7      	b.n	8005cdc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4413      	add	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	4413      	add	r3, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff fe6e 	bl	8005848 <move_window>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b70:	7ffb      	ldrb	r3, [r7, #31]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 80ab 	bne.w	8005cce <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	61b9      	str	r1, [r7, #24]
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	4413      	add	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <put_fat+0xa4>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	b25a      	sxtb	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e001      	b.n	8005bb6 <put_fat+0xa8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	0a5b      	lsrs	r3, r3, #9
 8005bc8:	4413      	add	r3, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fe3b 	bl	8005848 <move_window>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d17a      	bne.n	8005cd2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be8:	4413      	add	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <put_fat+0xf0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e00e      	b.n	8005c1c <put_fat+0x10e>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b25b      	sxtb	r3, r3
 8005c04:	f023 030f 	bic.w	r3, r3, #15
 8005c08:	b25a      	sxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	70da      	strb	r2, [r3, #3]
			break;
 8005c26:	e059      	b.n	8005cdc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	4413      	add	r3, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff fe07 	bl	8005848 <move_window>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d148      	bne.n	8005cd6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c52:	4413      	add	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	b292      	uxth	r2, r2
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fb7f 	bl	800535e <st_word>
			fs->wflag = 1;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	70da      	strb	r2, [r3, #3]
			break;
 8005c66:	e039      	b.n	8005cdc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	09db      	lsrs	r3, r3, #7
 8005c70:	4413      	add	r3, r2
 8005c72:	4619      	mov	r1, r3
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff fde7 	bl	8005848 <move_window>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d12a      	bne.n	8005cda <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c98:	4413      	add	r3, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fb3c 	bl	8005318 <ld_dword>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ca6:	4323      	orrs	r3, r4
 8005ca8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005cb8:	4413      	add	r3, r2
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fb69 	bl	8005394 <st_dword>
			fs->wflag = 1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	70da      	strb	r2, [r3, #3]
			break;
 8005cc8:	e008      	b.n	8005cdc <put_fat+0x1ce>
		}
	}
 8005cca:	bf00      	nop
 8005ccc:	e006      	b.n	8005cdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005cce:	bf00      	nop
 8005cd0:	e004      	b.n	8005cdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005cda:	bf00      	nop
	return res;
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3724      	adds	r7, #36	; 0x24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd90      	pop	{r4, r7, pc}

08005ce6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b088      	sub	sp, #32
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d904      	bls.n	8005d0c <remove_chain+0x26>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d301      	bcc.n	8005d10 <remove_chain+0x2a>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e04b      	b.n	8005da8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	69b8      	ldr	r0, [r7, #24]
 8005d1e:	f7ff fef6 	bl	8005b0e <put_fat>
 8005d22:	4603      	mov	r3, r0
 8005d24:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d26:	7ffb      	ldrb	r3, [r7, #31]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <remove_chain+0x4a>
 8005d2c:	7ffb      	ldrb	r3, [r7, #31]
 8005d2e:	e03b      	b.n	8005da8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff fe43 	bl	80059be <get_fat>
 8005d38:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d031      	beq.n	8005da4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <remove_chain+0x64>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e02e      	b.n	8005da8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d101      	bne.n	8005d56 <remove_chain+0x70>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e028      	b.n	8005da8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d56:	2200      	movs	r2, #0
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	69b8      	ldr	r0, [r7, #24]
 8005d5c:	f7ff fed7 	bl	8005b0e <put_fat>
 8005d60:	4603      	mov	r3, r0
 8005d62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <remove_chain+0x88>
 8005d6a:	7ffb      	ldrb	r3, [r7, #31]
 8005d6c:	e01c      	b.n	8005da8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	3b02      	subs	r3, #2
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d20b      	bcs.n	8005d94 <remove_chain+0xae>
			fs->free_clst++;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3c6      	bcc.n	8005d30 <remove_chain+0x4a>
 8005da2:	e000      	b.n	8005da6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005da4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10d      	bne.n	8005de2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <create_chain+0x2c>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d31b      	bcc.n	8005e14 <create_chain+0x64>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e018      	b.n	8005e14 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fdea 	bl	80059be <get_fat>
 8005dea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d801      	bhi.n	8005df6 <create_chain+0x46>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e070      	b.n	8005ed8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d101      	bne.n	8005e02 <create_chain+0x52>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e06a      	b.n	8005ed8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d201      	bcs.n	8005e10 <create_chain+0x60>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e063      	b.n	8005ed8 <create_chain+0x128>
		scl = clst;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d307      	bcc.n	8005e38 <create_chain+0x88>
				ncl = 2;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d901      	bls.n	8005e38 <create_chain+0x88>
 8005e34:	2300      	movs	r3, #0
 8005e36:	e04f      	b.n	8005ed8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e38:	69f9      	ldr	r1, [r7, #28]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fdbf 	bl	80059be <get_fat>
 8005e40:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00e      	beq.n	8005e66 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d003      	beq.n	8005e56 <create_chain+0xa6>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d101      	bne.n	8005e5a <create_chain+0xaa>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	e03e      	b.n	8005ed8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d1da      	bne.n	8005e18 <create_chain+0x68>
 8005e62:	2300      	movs	r3, #0
 8005e64:	e038      	b.n	8005ed8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e66:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	6938      	ldr	r0, [r7, #16]
 8005e70:	f7ff fe4d 	bl	8005b0e <put_fat>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <create_chain+0xe2>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6938      	ldr	r0, [r7, #16]
 8005e8a:	f7ff fe40 	bl	8005b0e <put_fat>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d116      	bne.n	8005ec6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d804      	bhi.n	8005eb6 <create_chain+0x106>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	1e5a      	subs	r2, r3, #1
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	711a      	strb	r2, [r3, #4]
 8005ec4:	e007      	b.n	8005ed6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d102      	bne.n	8005ed2 <create_chain+0x122>
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed0:	e000      	b.n	8005ed4 <create_chain+0x124>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	8952      	ldrh	r2, [r2, #10]
 8005f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	613a      	str	r2, [r7, #16]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <clmt_clust+0x3a>
 8005f16:	2300      	movs	r3, #0
 8005f18:	e010      	b.n	8005f3c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d307      	bcc.n	8005f32 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f30:	e7e9      	b.n	8005f06 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005f32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f5e:	d204      	bcs.n	8005f6a <dir_sdi+0x22>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e063      	b.n	8006036 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <dir_sdi+0x46>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d902      	bls.n	8005f8e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10c      	bne.n	8005fae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	8912      	ldrh	r2, [r2, #8]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d301      	bcc.n	8005fa4 <dir_sdi+0x5c>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e048      	b.n	8006036 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	61da      	str	r2, [r3, #28]
 8005fac:	e029      	b.n	8006002 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	895b      	ldrh	r3, [r3, #10]
 8005fb2:	025b      	lsls	r3, r3, #9
 8005fb4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fb6:	e019      	b.n	8005fec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fcfe 	bl	80059be <get_fat>
 8005fc2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d101      	bne.n	8005fd0 <dir_sdi+0x88>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e032      	b.n	8006036 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d904      	bls.n	8005fe0 <dir_sdi+0x98>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d301      	bcc.n	8005fe4 <dir_sdi+0x9c>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e028      	b.n	8006036 <dir_sdi+0xee>
			ofs -= csz;
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d2e1      	bcs.n	8005fb8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	6938      	ldr	r0, [r7, #16]
 8005ff8:	f7ff fcc2 	bl	8005980 <clust2sect>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <dir_sdi+0xcc>
 8006010:	2302      	movs	r3, #2
 8006012:	e010      	b.n	8006036 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	0a5b      	lsrs	r3, r3, #9
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	441a      	add	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	3320      	adds	r3, #32
 8006054:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <dir_next+0x28>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006064:	d301      	bcc.n	800606a <dir_next+0x2c>
 8006066:	2304      	movs	r3, #4
 8006068:	e0aa      	b.n	80061c0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 8098 	bne.w	80061a6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	8912      	ldrh	r2, [r2, #8]
 8006090:	4293      	cmp	r3, r2
 8006092:	f0c0 8088 	bcc.w	80061a6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	61da      	str	r2, [r3, #28]
 800609c:	2304      	movs	r3, #4
 800609e:	e08f      	b.n	80061c0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	0a5b      	lsrs	r3, r3, #9
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	8952      	ldrh	r2, [r2, #10]
 80060a8:	3a01      	subs	r2, #1
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d17a      	bne.n	80061a6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7ff fc80 	bl	80059be <get_fat>
 80060be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d801      	bhi.n	80060ca <dir_next+0x8c>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e07a      	b.n	80061c0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d101      	bne.n	80060d6 <dir_next+0x98>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e074      	b.n	80061c0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d358      	bcc.n	8006192 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	61da      	str	r2, [r3, #28]
 80060ec:	2304      	movs	r3, #4
 80060ee:	e067      	b.n	80061c0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7ff fe59 	bl	8005db0 <create_chain>
 80060fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <dir_next+0xcc>
 8006106:	2307      	movs	r3, #7
 8006108:	e05a      	b.n	80061c0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <dir_next+0xd6>
 8006110:	2302      	movs	r3, #2
 8006112:	e055      	b.n	80061c0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d101      	bne.n	8006120 <dir_next+0xe2>
 800611c:	2301      	movs	r3, #1
 800611e:	e04f      	b.n	80061c0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fb4d 	bl	80057c0 <sync_window>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <dir_next+0xf2>
 800612c:	2301      	movs	r3, #1
 800612e:	e047      	b.n	80061c0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3330      	adds	r3, #48	; 0x30
 8006134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff f977 	bl	800542e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fc1a 	bl	8005980 <clust2sect>
 800614c:	4602      	mov	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	62da      	str	r2, [r3, #44]	; 0x2c
 8006152:	e012      	b.n	800617a <dir_next+0x13c>
						fs->wflag = 1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fb30 	bl	80057c0 <sync_window>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <dir_next+0x12c>
 8006166:	2301      	movs	r3, #1
 8006168:	e02a      	b.n	80061c0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3301      	adds	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	895b      	ldrh	r3, [r3, #10]
 800617e:	461a      	mov	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4293      	cmp	r3, r2
 8006184:	d3e6      	bcc.n	8006154 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fbf0 	bl	8005980 <clust2sect>
 80061a0:	4602      	mov	r2, r0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	441a      	add	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061d8:	2100      	movs	r1, #0
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff feb4 	bl	8005f48 <dir_sdi>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d12b      	bne.n	8006242 <dir_alloc+0x7a>
		n = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fb27 	bl	8005848 <move_window>
 80061fa:	4603      	mov	r3, r0
 80061fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d11d      	bne.n	8006240 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2be5      	cmp	r3, #229	; 0xe5
 800620c:	d004      	beq.n	8006218 <dir_alloc+0x50>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d102      	bne.n	800622c <dir_alloc+0x64>
 8006226:	e00c      	b.n	8006242 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800622c:	2101      	movs	r1, #1
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff05 	bl	800603e <dir_next>
 8006234:	4603      	mov	r3, r0
 8006236:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0d7      	beq.n	80061ee <dir_alloc+0x26>
 800623e:	e000      	b.n	8006242 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006240:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b04      	cmp	r3, #4
 8006246:	d101      	bne.n	800624c <dir_alloc+0x84>
 8006248:	2307      	movs	r3, #7
 800624a:	75fb      	strb	r3, [r7, #23]
	return res;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	331a      	adds	r3, #26
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f83f 	bl	80052e8 <ld_word>
 800626a:	4603      	mov	r3, r0
 800626c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d109      	bne.n	800628a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f834 	bl	80052e8 <ld_word>
 8006280:	4603      	mov	r3, r0
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	331a      	adds	r3, #26
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	b292      	uxth	r2, r2
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff f857 	bl	800535e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d109      	bne.n	80062cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f103 0214 	add.w	r2, r3, #20
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7ff f849 	bl	800535e <st_word>
	}
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fe2f 	bl	8005f48 <dir_sdi>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <dir_find+0x24>
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	e03e      	b.n	8006376 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6938      	ldr	r0, [r7, #16]
 8006300:	f7ff faa2 	bl	8005848 <move_window>
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d12f      	bne.n	800636e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <dir_find+0x4e>
 800631c:	2304      	movs	r3, #4
 800631e:	75fb      	strb	r3, [r7, #23]
 8006320:	e028      	b.n	8006374 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	330b      	adds	r3, #11
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800632e:	b2da      	uxtb	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	330b      	adds	r3, #11
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <dir_find+0x86>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a18      	ldr	r0, [r3, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	220b      	movs	r2, #11
 800634e:	4619      	mov	r1, r3
 8006350:	f7ff f888 	bl	8005464 <mem_cmp>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fe6e 	bl	800603e <dir_next>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0c5      	beq.n	80062f8 <dir_find+0x24>
 800636c:	e002      	b.n	8006374 <dir_find+0xa0>
		if (res != FR_OK) break;
 800636e:	bf00      	nop
 8006370:	e000      	b.n	8006374 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006372:	bf00      	nop

	return res;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff ff1a 	bl	80061c8 <dir_alloc>
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11c      	bne.n	80063d8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	4619      	mov	r1, r3
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f7ff fa4f 	bl	8005848 <move_window>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d111      	bne.n	80063d8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	2220      	movs	r2, #32
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff f836 	bl	800542e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a18      	ldr	r0, [r3, #32]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	220b      	movs	r2, #11
 80063cc:	4619      	mov	r1, r3
 80063ce:	f7ff f80d 	bl	80053ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2201      	movs	r2, #1
 80063d6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80063fa:	220b      	movs	r2, #11
 80063fc:	2120      	movs	r1, #32
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f7ff f815 	bl	800542e <mem_set>
	si = i = 0; ni = 8;
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	2308      	movs	r3, #8
 800640e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800641e:	7efb      	ldrb	r3, [r7, #27]
 8006420:	2b20      	cmp	r3, #32
 8006422:	d94e      	bls.n	80064c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006424:	7efb      	ldrb	r3, [r7, #27]
 8006426:	2b2f      	cmp	r3, #47	; 0x2f
 8006428:	d006      	beq.n	8006438 <create_name+0x54>
 800642a:	7efb      	ldrb	r3, [r7, #27]
 800642c:	2b5c      	cmp	r3, #92	; 0x5c
 800642e:	d110      	bne.n	8006452 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006430:	e002      	b.n	8006438 <create_name+0x54>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	4413      	add	r3, r2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b2f      	cmp	r3, #47	; 0x2f
 8006442:	d0f6      	beq.n	8006432 <create_name+0x4e>
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b5c      	cmp	r3, #92	; 0x5c
 800644e:	d0f0      	beq.n	8006432 <create_name+0x4e>
			break;
 8006450:	e038      	b.n	80064c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006452:	7efb      	ldrb	r3, [r7, #27]
 8006454:	2b2e      	cmp	r3, #46	; 0x2e
 8006456:	d003      	beq.n	8006460 <create_name+0x7c>
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	429a      	cmp	r2, r3
 800645e:	d30c      	bcc.n	800647a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b0b      	cmp	r3, #11
 8006464:	d002      	beq.n	800646c <create_name+0x88>
 8006466:	7efb      	ldrb	r3, [r7, #27]
 8006468:	2b2e      	cmp	r3, #46	; 0x2e
 800646a:	d001      	beq.n	8006470 <create_name+0x8c>
 800646c:	2306      	movs	r3, #6
 800646e:	e044      	b.n	80064fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006470:	2308      	movs	r3, #8
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	230b      	movs	r3, #11
 8006476:	617b      	str	r3, [r7, #20]
			continue;
 8006478:	e022      	b.n	80064c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800647a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da04      	bge.n	800648c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006482:	7efb      	ldrb	r3, [r7, #27]
 8006484:	3b80      	subs	r3, #128	; 0x80
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <create_name+0x120>)
 8006488:	5cd3      	ldrb	r3, [r2, r3]
 800648a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800648c:	7efb      	ldrb	r3, [r7, #27]
 800648e:	4619      	mov	r1, r3
 8006490:	481d      	ldr	r0, [pc, #116]	; (8006508 <create_name+0x124>)
 8006492:	f7ff f80e 	bl	80054b2 <chk_chr>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <create_name+0xbc>
 800649c:	2306      	movs	r3, #6
 800649e:	e02c      	b.n	80064fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80064a0:	7efb      	ldrb	r3, [r7, #27]
 80064a2:	2b60      	cmp	r3, #96	; 0x60
 80064a4:	d905      	bls.n	80064b2 <create_name+0xce>
 80064a6:	7efb      	ldrb	r3, [r7, #27]
 80064a8:	2b7a      	cmp	r3, #122	; 0x7a
 80064aa:	d802      	bhi.n	80064b2 <create_name+0xce>
 80064ac:	7efb      	ldrb	r3, [r7, #27]
 80064ae:	3b20      	subs	r3, #32
 80064b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	613a      	str	r2, [r7, #16]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	7efa      	ldrb	r2, [r7, #27]
 80064be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80064c0:	e7a6      	b.n	8006410 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	441a      	add	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <create_name+0xf4>
 80064d4:	2306      	movs	r3, #6
 80064d6:	e010      	b.n	80064fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2be5      	cmp	r3, #229	; 0xe5
 80064de:	d102      	bne.n	80064e6 <create_name+0x102>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2205      	movs	r2, #5
 80064e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064e6:	7efb      	ldrb	r3, [r7, #27]
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d801      	bhi.n	80064f0 <create_name+0x10c>
 80064ec:	2204      	movs	r2, #4
 80064ee:	e000      	b.n	80064f2 <create_name+0x10e>
 80064f0:	2200      	movs	r2, #0
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	330b      	adds	r3, #11
 80064f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80064f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08007e68 	.word	0x08007e68
 8006508:	08007df8 	.word	0x08007df8

0800650c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006520:	e002      	b.n	8006528 <follow_path+0x1c>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b2f      	cmp	r3, #47	; 0x2f
 800652e:	d0f8      	beq.n	8006522 <follow_path+0x16>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b5c      	cmp	r3, #92	; 0x5c
 8006536:	d0f4      	beq.n	8006522 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b1f      	cmp	r3, #31
 8006544:	d80a      	bhi.n	800655c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2280      	movs	r2, #128	; 0x80
 800654a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800654e:	2100      	movs	r1, #0
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fcf9 	bl	8005f48 <dir_sdi>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
 800655a:	e043      	b.n	80065e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800655c:	463b      	mov	r3, r7
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff3f 	bl	80063e4 <create_name>
 8006566:	4603      	mov	r3, r0
 8006568:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d134      	bne.n	80065da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff feaf 	bl	80062d4 <dir_find>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006580:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	2b04      	cmp	r3, #4
 800658c:	d127      	bne.n	80065de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d122      	bne.n	80065de <follow_path+0xd2>
 8006598:	2305      	movs	r3, #5
 800659a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800659c:	e01f      	b.n	80065de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11c      	bne.n	80065e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	799b      	ldrb	r3, [r3, #6]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80065b4:	2305      	movs	r3, #5
 80065b6:	75fb      	strb	r3, [r7, #23]
 80065b8:	e014      	b.n	80065e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c8:	4413      	add	r3, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fe42 	bl	8006256 <ld_clust>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065d8:	e7c0      	b.n	800655c <follow_path+0x50>
			if (res != FR_OK) break;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <follow_path+0xd8>
				break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065e2:	bf00      	nop
			}
		}
	}

	return res;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d031      	beq.n	8006668 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e002      	b.n	8006612 <get_ldnumber+0x24>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b20      	cmp	r3, #32
 8006618:	d903      	bls.n	8006622 <get_ldnumber+0x34>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b3a      	cmp	r3, #58	; 0x3a
 8006620:	d1f4      	bne.n	800660c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b3a      	cmp	r3, #58	; 0x3a
 8006628:	d11c      	bne.n	8006664 <get_ldnumber+0x76>
			tp = *path;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	60fa      	str	r2, [r7, #12]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	3b30      	subs	r3, #48	; 0x30
 800663a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b09      	cmp	r3, #9
 8006640:	d80e      	bhi.n	8006660 <get_ldnumber+0x72>
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	429a      	cmp	r2, r3
 8006648:	d10a      	bne.n	8006660 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <get_ldnumber+0x72>
					vol = (int)i;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3301      	adds	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	e002      	b.n	800666a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006668:	693b      	ldr	r3, [r7, #16]
}
 800666a:	4618      	mov	r0, r3
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	70da      	strb	r2, [r3, #3]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff f8d8 	bl	8005848 <move_window>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <check_fs+0x2a>
 800669e:	2304      	movs	r3, #4
 80066a0:	e038      	b.n	8006714 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3330      	adds	r3, #48	; 0x30
 80066a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fe1c 	bl	80052e8 <ld_word>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <check_fs+0x48>
 80066bc:	2303      	movs	r3, #3
 80066be:	e029      	b.n	8006714 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066c6:	2be9      	cmp	r3, #233	; 0xe9
 80066c8:	d009      	beq.n	80066de <check_fs+0x66>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066d0:	2beb      	cmp	r3, #235	; 0xeb
 80066d2:	d11e      	bne.n	8006712 <check_fs+0x9a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066da:	2b90      	cmp	r3, #144	; 0x90
 80066dc:	d119      	bne.n	8006712 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3330      	adds	r3, #48	; 0x30
 80066e2:	3336      	adds	r3, #54	; 0x36
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe fe17 	bl	8005318 <ld_dword>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <check_fs+0xa4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <check_fs+0x82>
 80066f6:	2300      	movs	r3, #0
 80066f8:	e00c      	b.n	8006714 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3330      	adds	r3, #48	; 0x30
 80066fe:	3352      	adds	r3, #82	; 0x52
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fe09 	bl	8005318 <ld_dword>
 8006706:	4603      	mov	r3, r0
 8006708:	4a05      	ldr	r2, [pc, #20]	; (8006720 <check_fs+0xa8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d101      	bne.n	8006712 <check_fs+0x9a>
 800670e:	2300      	movs	r3, #0
 8006710:	e000      	b.n	8006714 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006712:	2302      	movs	r3, #2
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	00544146 	.word	0x00544146
 8006720:	33544146 	.word	0x33544146

08006724 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b096      	sub	sp, #88	; 0x58
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff58 	bl	80065ee <get_ldnumber>
 800673e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	2b00      	cmp	r3, #0
 8006744:	da01      	bge.n	800674a <find_volume+0x26>
 8006746:	230b      	movs	r3, #11
 8006748:	e22d      	b.n	8006ba6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800674a:	4aa1      	ldr	r2, [pc, #644]	; (80069d0 <find_volume+0x2ac>)
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006752:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <find_volume+0x3a>
 800675a:	230c      	movs	r3, #12
 800675c:	e223      	b.n	8006ba6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006762:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fd17 	bl	80051ac <disk_status>
 800677e:	4603      	mov	r3, r0
 8006780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10c      	bne.n	80067aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <find_volume+0x82>
 8006796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80067a2:	230a      	movs	r3, #10
 80067a4:	e1ff      	b.n	8006ba6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80067a6:	2300      	movs	r3, #0
 80067a8:	e1fd      	b.n	8006ba6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fd0f 	bl	80051e0 <disk_initialize>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067d4:	2303      	movs	r3, #3
 80067d6:	e1e6      	b.n	8006ba6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <find_volume+0xca>
 80067de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067ea:	230a      	movs	r3, #10
 80067ec:	e1db      	b.n	8006ba6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80067f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067f6:	f7ff ff3f 	bl	8006678 <check_fs>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006804:	2b02      	cmp	r3, #2
 8006806:	d149      	bne.n	800689c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006808:	2300      	movs	r3, #0
 800680a:	643b      	str	r3, [r7, #64]	; 0x40
 800680c:	e01e      	b.n	800684c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800681c:	4413      	add	r3, r2
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	3304      	adds	r3, #4
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <find_volume+0x114>
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	3308      	adds	r3, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fd72 	bl	8005318 <ld_dword>
 8006834:	4602      	mov	r2, r0
 8006836:	e000      	b.n	800683a <find_volume+0x116>
 8006838:	2200      	movs	r2, #0
 800683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	3358      	adds	r3, #88	; 0x58
 8006840:	443b      	add	r3, r7
 8006842:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	3301      	adds	r3, #1
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684e:	2b03      	cmp	r3, #3
 8006850:	d9dd      	bls.n	800680e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006852:	2300      	movs	r3, #0
 8006854:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <find_volume+0x13e>
 800685c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685e:	3b01      	subs	r3, #1
 8006860:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	3358      	adds	r3, #88	; 0x58
 8006868:	443b      	add	r3, r7
 800686a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <find_volume+0x15e>
 8006876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800687a:	f7ff fefd 	bl	8006678 <check_fs>
 800687e:	4603      	mov	r3, r0
 8006880:	e000      	b.n	8006884 <find_volume+0x160>
 8006882:	2303      	movs	r3, #3
 8006884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800688c:	2b01      	cmp	r3, #1
 800688e:	d905      	bls.n	800689c <find_volume+0x178>
 8006890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006892:	3301      	adds	r3, #1
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
 8006896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006898:	2b03      	cmp	r3, #3
 800689a:	d9e2      	bls.n	8006862 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800689c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d101      	bne.n	80068a8 <find_volume+0x184>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e17e      	b.n	8006ba6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d901      	bls.n	80068b4 <find_volume+0x190>
 80068b0:	230d      	movs	r3, #13
 80068b2:	e178      	b.n	8006ba6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	3330      	adds	r3, #48	; 0x30
 80068b8:	330b      	adds	r3, #11
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fd14 	bl	80052e8 <ld_word>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c6:	d001      	beq.n	80068cc <find_volume+0x1a8>
 80068c8:	230d      	movs	r3, #13
 80068ca:	e16c      	b.n	8006ba6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	3330      	adds	r3, #48	; 0x30
 80068d0:	3316      	adds	r3, #22
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fd08 	bl	80052e8 <ld_word>
 80068d8:	4603      	mov	r3, r0
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80068dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <find_volume+0x1cc>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	3330      	adds	r3, #48	; 0x30
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fd15 	bl	8005318 <ld_dword>
 80068ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d005      	beq.n	8006914 <find_volume+0x1f0>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d001      	beq.n	8006914 <find_volume+0x1f0>
 8006910:	230d      	movs	r3, #13
 8006912:	e148      	b.n	8006ba6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	461a      	mov	r2, r3
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b29a      	uxth	r2, r3
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <find_volume+0x224>
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	895b      	ldrh	r3, [r3, #10]
 800693a:	461a      	mov	r2, r3
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	895b      	ldrh	r3, [r3, #10]
 8006940:	3b01      	subs	r3, #1
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <find_volume+0x228>
 8006948:	230d      	movs	r3, #13
 800694a:	e12c      	b.n	8006ba6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	3330      	adds	r3, #48	; 0x30
 8006950:	3311      	adds	r3, #17
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fcc8 	bl	80052e8 <ld_word>
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	891b      	ldrh	r3, [r3, #8]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <find_volume+0x24e>
 800696e:	230d      	movs	r3, #13
 8006970:	e119      	b.n	8006ba6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	3330      	adds	r3, #48	; 0x30
 8006976:	3313      	adds	r3, #19
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fcb5 	bl	80052e8 <ld_word>
 800697e:	4603      	mov	r3, r0
 8006980:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <find_volume+0x272>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	3330      	adds	r3, #48	; 0x30
 800698c:	3320      	adds	r3, #32
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fcc2 	bl	8005318 <ld_dword>
 8006994:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	330e      	adds	r3, #14
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fca3 	bl	80052e8 <ld_word>
 80069a2:	4603      	mov	r3, r0
 80069a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <find_volume+0x28c>
 80069ac:	230d      	movs	r3, #13
 80069ae:	e0fa      	b.n	8006ba6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	4413      	add	r3, r2
 80069b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b8:	8912      	ldrh	r2, [r2, #8]
 80069ba:	0912      	lsrs	r2, r2, #4
 80069bc:	b292      	uxth	r2, r2
 80069be:	4413      	add	r3, r2
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d204      	bcs.n	80069d4 <find_volume+0x2b0>
 80069ca:	230d      	movs	r3, #13
 80069cc:	e0eb      	b.n	8006ba6 <find_volume+0x482>
 80069ce:	bf00      	nop
 80069d0:	20000804 	.word	0x20000804
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069dc:	8952      	ldrh	r2, [r2, #10]
 80069de:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <find_volume+0x2ca>
 80069ea:	230d      	movs	r3, #13
 80069ec:	e0db      	b.n	8006ba6 <find_volume+0x482>
		fmt = FS_FAT32;
 80069ee:	2303      	movs	r3, #3
 80069f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d802      	bhi.n	8006a04 <find_volume+0x2e0>
 80069fe:	2302      	movs	r3, #2
 8006a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d802      	bhi.n	8006a14 <find_volume+0x2f0>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a20:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a26:	441a      	add	r2, r3
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006a2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	441a      	add	r2, r3
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d11e      	bne.n	8006a7c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	3330      	adds	r3, #48	; 0x30
 8006a42:	332a      	adds	r3, #42	; 0x2a
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fc4f 	bl	80052e8 <ld_word>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <find_volume+0x330>
 8006a50:	230d      	movs	r3, #13
 8006a52:	e0a8      	b.n	8006ba6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	891b      	ldrh	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <find_volume+0x33c>
 8006a5c:	230d      	movs	r3, #13
 8006a5e:	e0a2      	b.n	8006ba6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	3330      	adds	r3, #48	; 0x30
 8006a64:	332c      	adds	r3, #44	; 0x2c
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fc56 	bl	8005318 <ld_dword>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7a:	e01f      	b.n	8006abc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	891b      	ldrh	r3, [r3, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <find_volume+0x364>
 8006a84:	230d      	movs	r3, #13
 8006a86:	e08e      	b.n	8006ba6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	441a      	add	r2, r3
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d103      	bne.n	8006aa4 <find_volume+0x380>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	e00a      	b.n	8006aba <find_volume+0x396>
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	4413      	add	r3, r2
 8006aae:	085a      	lsrs	r2, r3, #1
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006aba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006ac6:	0a5b      	lsrs	r3, r3, #9
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d201      	bcs.n	8006ad0 <find_volume+0x3ac>
 8006acc:	230d      	movs	r3, #13
 8006ace:	e06a      	b.n	8006ba6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	611a      	str	r2, [r3, #16]
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2280      	movs	r2, #128	; 0x80
 8006ae4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d149      	bne.n	8006b82 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	3330      	adds	r3, #48	; 0x30
 8006af2:	3330      	adds	r3, #48	; 0x30
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fbf7 	bl	80052e8 <ld_word>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d140      	bne.n	8006b82 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b02:	3301      	adds	r3, #1
 8006b04:	4619      	mov	r1, r3
 8006b06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b08:	f7fe fe9e 	bl	8005848 <move_window>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d137      	bne.n	8006b82 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	2200      	movs	r2, #0
 8006b16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	3330      	adds	r3, #48	; 0x30
 8006b1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fbe1 	bl	80052e8 <ld_word>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d127      	bne.n	8006b82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	3330      	adds	r3, #48	; 0x30
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fbee 	bl	8005318 <ld_dword>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <find_volume+0x48c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d11e      	bne.n	8006b82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	3330      	adds	r3, #48	; 0x30
 8006b48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fbe3 	bl	8005318 <ld_dword>
 8006b52:	4603      	mov	r3, r0
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <find_volume+0x490>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d113      	bne.n	8006b82 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	3330      	adds	r3, #48	; 0x30
 8006b5e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fbd8 	bl	8005318 <ld_dword>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	3330      	adds	r3, #48	; 0x30
 8006b72:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fbce 	bl	8005318 <ld_dword>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <find_volume+0x494>)
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <find_volume+0x494>)
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <find_volume+0x494>)
 8006b98:	881a      	ldrh	r2, [r3, #0]
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ba0:	f7fe fdea 	bl	8005778 <clear_lock>
#endif
	return FR_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3758      	adds	r7, #88	; 0x58
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	41615252 	.word	0x41615252
 8006bb4:	61417272 	.word	0x61417272
 8006bb8:	20000808 	.word	0x20000808

08006bbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006bc6:	2309      	movs	r3, #9
 8006bc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <validate+0x4e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d018      	beq.n	8006c0a <validate+0x4e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <validate+0x4e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	889a      	ldrh	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d10c      	bne.n	8006c0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fad8 	bl	80051ac <disk_status>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <validate+0x4e>
			res = FR_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <validate+0x5a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	e000      	b.n	8006c18 <validate+0x5c>
 8006c16:	2300      	movs	r3, #0
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	6013      	str	r3, [r2, #0]
	return res;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fcd5 	bl	80065ee <get_ldnumber>
 8006c44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	da01      	bge.n	8006c50 <f_mount+0x28>
 8006c4c:	230b      	movs	r3, #11
 8006c4e:	e02b      	b.n	8006ca8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c50:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <f_mount+0x88>)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c60:	69b8      	ldr	r0, [r7, #24]
 8006c62:	f7fe fd89 	bl	8005778 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	490d      	ldr	r1, [pc, #52]	; (8006cb0 <f_mount+0x88>)
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <f_mount+0x66>
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d001      	beq.n	8006c92 <f_mount+0x6a>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e00a      	b.n	8006ca8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c92:	f107 010c 	add.w	r1, r7, #12
 8006c96:	f107 0308 	add.w	r3, r7, #8
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fd41 	bl	8006724 <find_volume>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000804 	.word	0x20000804

08006cb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b098      	sub	sp, #96	; 0x60
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <f_open+0x18>
 8006cc8:	2309      	movs	r3, #9
 8006cca:	e1ad      	b.n	8007028 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006cd4:	79fa      	ldrb	r2, [r7, #7]
 8006cd6:	f107 0110 	add.w	r1, r7, #16
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fd20 	bl	8006724 <find_volume>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 8191 	bne.w	8007016 <f_open+0x362>
		dj.obj.fs = fs;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fc03 	bl	800650c <follow_path>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d11a      	bne.n	8006d4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da03      	bge.n	8006d26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d1e:	2306      	movs	r3, #6
 8006d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d24:	e011      	b.n	8006d4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fbd2 	bl	80054e8 <chk_lock>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	f003 031c 	and.w	r3, r3, #28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d07f      	beq.n	8006e54 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d10e      	bne.n	8006d82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d64:	f7fe fc1c 	bl	80055a0 <enq_lock>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d006      	beq.n	8006d7c <f_open+0xc8>
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fb03 	bl	800637e <dir_register>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	e000      	b.n	8006d7e <f_open+0xca>
 8006d7c:	2312      	movs	r3, #18
 8006d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	f043 0308 	orr.w	r3, r3, #8
 8006d88:	71fb      	strb	r3, [r7, #7]
 8006d8a:	e010      	b.n	8006dae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d8c:	7ebb      	ldrb	r3, [r7, #26]
 8006d8e:	f003 0311 	and.w	r3, r3, #17
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <f_open+0xea>
					res = FR_DENIED;
 8006d96:	2307      	movs	r3, #7
 8006d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d9c:	e007      	b.n	8006dae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <f_open+0xfa>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d168      	bne.n	8006e88 <f_open+0x1d4>
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d063      	beq.n	8006e88 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006dc0:	f7fd ffa4 	bl	8004d0c <get_fattime>
 8006dc4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	330e      	adds	r3, #14
 8006dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fae1 	bl	8005394 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	3316      	adds	r3, #22
 8006dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe fadb 	bl	8005394 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	330b      	adds	r3, #11
 8006de2:	2220      	movs	r2, #32
 8006de4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fa32 	bl	8006256 <ld_clust>
 8006df2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fa4a 	bl	8006294 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	331c      	adds	r3, #28
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fac4 	bl	8005394 <st_dword>
					fs->wflag = 1;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d037      	beq.n	8006e88 <f_open+0x1d4>
						dw = fs->winsect;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e1e:	f107 0314 	add.w	r3, r7, #20
 8006e22:	2200      	movs	r2, #0
 8006e24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe ff5d 	bl	8005ce6 <remove_chain>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d126      	bne.n	8006e88 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe fd02 	bl	8005848 <move_window>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e4e:	3a01      	subs	r2, #1
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	e019      	b.n	8006e88 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d115      	bne.n	8006e88 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e5c:	7ebb      	ldrb	r3, [r7, #26]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006e66:	2304      	movs	r3, #4
 8006e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e6c:	e00c      	b.n	8006e88 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <f_open+0x1d4>
 8006e78:	7ebb      	ldrb	r3, [r7, #26]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <f_open+0x1d4>
						res = FR_DENIED;
 8006e82:	2307      	movs	r3, #7
 8006e84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d128      	bne.n	8006ee2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f107 0314 	add.w	r3, r7, #20
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe fb8b 	bl	80055e4 <inc_lock>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <f_open+0x22e>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 8095 	bne.w	8007016 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff f9af 	bl	8006256 <ld_clust>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f00:	331c      	adds	r3, #28
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fa08 	bl	8005318 <ld_dword>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	88da      	ldrh	r2, [r3, #6]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	79fa      	ldrb	r2, [r7, #7]
 8006f26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3330      	adds	r3, #48	; 0x30
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fa72 	bl	800542e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d060      	beq.n	8007016 <f_open+0x362>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d05c      	beq.n	8007016 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	895b      	ldrh	r3, [r3, #10]
 8006f68:	025b      	lsls	r3, r3, #9
 8006f6a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	657b      	str	r3, [r7, #84]	; 0x54
 8006f78:	e016      	b.n	8006fa8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fd1d 	bl	80059be <get_fat>
 8006f84:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d802      	bhi.n	8006f92 <f_open+0x2de>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d102      	bne.n	8006fa0 <f_open+0x2ec>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <f_open+0x304>
 8006fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d8e0      	bhi.n	8006f7a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d127      	bne.n	8007016 <f_open+0x362>
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d022      	beq.n	8007016 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fcd3 	bl	8005980 <clust2sect>
 8006fda:	6478      	str	r0, [r7, #68]	; 0x44
 8006fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <f_open+0x336>
						res = FR_INT_ERR;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fe8:	e015      	b.n	8007016 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fec:	0a5a      	lsrs	r2, r3, #9
 8006fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	7858      	ldrb	r0, [r3, #1]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	2301      	movs	r3, #1
 8007006:	f7fe f911 	bl	800522c <disk_read>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <f_open+0x362>
 8007010:	2301      	movs	r3, #1
 8007012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <f_open+0x370>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007028:	4618      	mov	r0, r3
 800702a:	3760      	adds	r7, #96	; 0x60
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08c      	sub	sp, #48	; 0x30
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f107 0210 	add.w	r2, r7, #16
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fdb3 	bl	8006bbc <validate>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800705c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <f_write+0x44>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	7d5b      	ldrb	r3, [r3, #21]
 8007068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800706c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <f_write+0x4a>
 8007074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007078:	e14b      	b.n	8007312 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	7d1b      	ldrb	r3, [r3, #20]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <f_write+0x5a>
 8007086:	2307      	movs	r3, #7
 8007088:	e143      	b.n	8007312 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	429a      	cmp	r2, r3
 8007098:	f080 812d 	bcs.w	80072f6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80070a4:	e127      	b.n	80072f6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 80e3 	bne.w	800727a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	8952      	ldrh	r2, [r2, #10]
 80070be:	3a01      	subs	r2, #1
 80070c0:	4013      	ands	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d143      	bne.n	8007152 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d11a      	bne.n	8007114 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fe64 	bl	8005db0 <create_chain>
 80070e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80070ea:	e013      	b.n	8007114 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4619      	mov	r1, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7fe fef0 	bl	8005ee0 <clmt_clust>
 8007100:	62b8      	str	r0, [r7, #40]	; 0x28
 8007102:	e007      	b.n	8007114 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f7fe fe4f 	bl	8005db0 <create_chain>
 8007112:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80f2 	beq.w	8007300 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	2b01      	cmp	r3, #1
 8007120:	d104      	bne.n	800712c <f_write+0xfc>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2202      	movs	r2, #2
 8007126:	755a      	strb	r2, [r3, #21]
 8007128:	2302      	movs	r3, #2
 800712a:	e0f2      	b.n	8007312 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d104      	bne.n	800713e <f_write+0x10e>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	755a      	strb	r2, [r3, #21]
 800713a:	2301      	movs	r3, #1
 800713c:	e0e9      	b.n	8007312 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007142:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <f_write+0x122>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007150:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7d1b      	ldrb	r3, [r3, #20]
 8007156:	b25b      	sxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	da18      	bge.n	800718e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	7858      	ldrb	r0, [r3, #1]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	2301      	movs	r3, #1
 800716c:	f7fe f87e 	bl	800526c <disk_write>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <f_write+0x150>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	755a      	strb	r2, [r3, #21]
 800717c:	2301      	movs	r3, #1
 800717e:	e0c8      	b.n	8007312 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7d1b      	ldrb	r3, [r3, #20]
 8007184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f7fe fbf2 	bl	8005980 <clust2sect>
 800719c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <f_write+0x17e>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2202      	movs	r2, #2
 80071a8:	755a      	strb	r2, [r3, #21]
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0b1      	b.n	8007312 <f_write+0x2e2>
			sect += csect;
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	4413      	add	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03c      	beq.n	800723c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	4413      	add	r3, r2
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	8952      	ldrh	r2, [r2, #10]
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d905      	bls.n	80071dc <f_write+0x1ac>
					cc = fs->csize - csect;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	461a      	mov	r2, r3
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	7858      	ldrb	r0, [r3, #1]
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	69f9      	ldr	r1, [r7, #28]
 80071e6:	f7fe f841 	bl	800526c <disk_write>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <f_write+0x1ca>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	755a      	strb	r2, [r3, #21]
 80071f6:	2301      	movs	r3, #1
 80071f8:	e08b      	b.n	8007312 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1a      	ldr	r2, [r3, #32]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	429a      	cmp	r2, r3
 8007206:	d915      	bls.n	8007234 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	025b      	lsls	r3, r3, #9
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007220:	4619      	mov	r1, r3
 8007222:	f7fe f8e3 	bl	80053ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	7d1b      	ldrb	r3, [r3, #20]
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	025b      	lsls	r3, r3, #9
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800723a:	e03f      	b.n	80072bc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	429a      	cmp	r2, r3
 8007244:	d016      	beq.n	8007274 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800724e:	429a      	cmp	r2, r3
 8007250:	d210      	bcs.n	8007274 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	7858      	ldrb	r0, [r3, #1]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800725c:	2301      	movs	r3, #1
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	f7fd ffe4 	bl	800522c <disk_read>
 8007264:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	755a      	strb	r2, [r3, #21]
 8007270:	2301      	movs	r3, #1
 8007272:	e04e      	b.n	8007312 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d901      	bls.n	8007294 <f_write+0x264>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	4413      	add	r3, r2
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	69f9      	ldr	r1, [r7, #28]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe f89f 	bl	80053ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	7d1b      	ldrb	r3, [r3, #20]
 80072b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	4413      	add	r3, r2
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	619a      	str	r2, [r3, #24]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf38      	it	cc
 80072dc:	461a      	movcc	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	60da      	str	r2, [r3, #12]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	441a      	add	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f47f aed4 	bne.w	80070a6 <f_write+0x76>
 80072fe:	e000      	b.n	8007302 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007300:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	7d1b      	ldrb	r3, [r3, #20]
 8007306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3730      	adds	r7, #48	; 0x30
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f107 0208 	add.w	r2, r7, #8
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff fc46 	bl	8006bbc <validate>
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d168      	bne.n	800740c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7d1b      	ldrb	r3, [r3, #20]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d062      	beq.n	800740c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7d1b      	ldrb	r3, [r3, #20]
 800734a:	b25b      	sxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	da15      	bge.n	800737c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	7858      	ldrb	r0, [r3, #1]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1a      	ldr	r2, [r3, #32]
 800735e:	2301      	movs	r3, #1
 8007360:	f7fd ff84 	bl	800526c <disk_write>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <f_sync+0x54>
 800736a:	2301      	movs	r3, #1
 800736c:	e04f      	b.n	800740e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7d1b      	ldrb	r3, [r3, #20]
 8007372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007376:	b2da      	uxtb	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800737c:	f7fd fcc6 	bl	8004d0c <get_fattime>
 8007380:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f7fe fa5c 	bl	8005848 <move_window>
 8007390:	4603      	mov	r3, r0
 8007392:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d138      	bne.n	800740c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	330b      	adds	r3, #11
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	330b      	adds	r3, #11
 80073aa:	f042 0220 	orr.w	r2, r2, #32
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	461a      	mov	r2, r3
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	f7fe ff69 	bl	8006294 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f103 021c 	add.w	r2, r3, #28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7fd ffe0 	bl	8005394 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3316      	adds	r3, #22
 80073d8:	6939      	ldr	r1, [r7, #16]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd ffda 	bl	8005394 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3312      	adds	r3, #18
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd ffb9 	bl	800535e <st_word>
					fs->wflag = 1;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2201      	movs	r2, #1
 80073f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fa55 	bl	80058a4 <sync_fs>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7d1b      	ldrb	r3, [r3, #20]
 8007402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007406:	b2da      	uxtb	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800740c:	7dfb      	ldrb	r3, [r7, #23]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff ff7b 	bl	800731a <f_sync>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d118      	bne.n	8007460 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f107 0208 	add.w	r2, r7, #8
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fbc0 	bl	8006bbc <validate>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe f958 	bl	8005700 <dec_lock>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800746c:	b590      	push	{r4, r7, lr}
 800746e:	b09d      	sub	sp, #116	; 0x74
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	460b      	mov	r3, r1
 800747a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800747c:	2301      	movs	r3, #1
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8007480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007484:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff f8af 	bl	80065ee <get_ldnumber>
 8007490:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	2b00      	cmp	r3, #0
 8007496:	da02      	bge.n	800749e <f_mkfs+0x32>
 8007498:	230b      	movs	r3, #11
 800749a:	f000 bc0d 	b.w	8007cb8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800749e:	4a94      	ldr	r2, [pc, #592]	; (80076f0 <f_mkfs+0x284>)
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <f_mkfs+0x4a>
 80074aa:	4a91      	ldr	r2, [pc, #580]	; (80076f0 <f_mkfs+0x284>)
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80074c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fe8a 	bl	80051e0 <disk_initialize>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80074d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <f_mkfs+0x76>
 80074de:	2303      	movs	r3, #3
 80074e0:	e3ea      	b.n	8007cb8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80074e2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <f_mkfs+0x86>
 80074ee:	230a      	movs	r3, #10
 80074f0:	e3e2      	b.n	8007cb8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80074f2:	f107 0214 	add.w	r2, r7, #20
 80074f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074fa:	2103      	movs	r1, #3
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fd fed5 	bl	80052ac <disk_ioctl>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10c      	bne.n	8007522 <f_mkfs+0xb6>
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <f_mkfs+0xb6>
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	d805      	bhi.n	8007522 <f_mkfs+0xb6>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	1e5a      	subs	r2, r3, #1
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	4013      	ands	r3, r2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <f_mkfs+0xba>
 8007522:	2301      	movs	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8007526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <f_mkfs+0xce>
 8007532:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d309      	bcc.n	800754e <f_mkfs+0xe2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007540:	d805      	bhi.n	800754e <f_mkfs+0xe2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	1e5a      	subs	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <f_mkfs+0xe6>
 800754e:	2313      	movs	r3, #19
 8007550:	e3b2      	b.n	8007cb8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8007552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	fbb2 f3f3 	udiv	r3, r2, r3
 800755a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8007560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007566:	fbb2 f3f3 	udiv	r3, r2, r3
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800756c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <f_mkfs+0x114>
 800757c:	230e      	movs	r3, #14
 800757e:	e39b      	b.n	8007cb8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007580:	f107 0210 	add.w	r2, r7, #16
 8007584:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007588:	2101      	movs	r1, #1
 800758a:	4618      	mov	r0, r3
 800758c:	f7fd fe8e 	bl	80052ac <disk_ioctl>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <f_mkfs+0x12e>
 8007596:	2301      	movs	r3, #1
 8007598:	e38e      	b.n	8007cb8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <f_mkfs+0x13c>
 80075a4:	2300      	movs	r3, #0
 80075a6:	e000      	b.n	80075aa <f_mkfs+0x13e>
 80075a8:	233f      	movs	r3, #63	; 0x3f
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d901      	bls.n	80075b8 <f_mkfs+0x14c>
 80075b4:	230e      	movs	r3, #14
 80075b6:	e37f      	b.n	8007cb8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b7f      	cmp	r3, #127	; 0x7f
 80075c4:	d801      	bhi.n	80075ca <f_mkfs+0x15e>
 80075c6:	230e      	movs	r3, #14
 80075c8:	e376      	b.n	8007cb8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d901      	bls.n	80075d4 <f_mkfs+0x168>
 80075d0:	2313      	movs	r3, #19
 80075d2:	e371      	b.n	8007cb8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d004      	beq.n	80075f2 <f_mkfs+0x186>
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80075f2:	2303      	movs	r3, #3
 80075f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80075f8:	e009      	b.n	800760e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <f_mkfs+0x19c>
 8007604:	2313      	movs	r3, #19
 8007606:	e357      	b.n	8007cb8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8007608:	2302      	movs	r3, #2
 800760a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8007612:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007616:	2b03      	cmp	r3, #3
 8007618:	d13c      	bne.n	8007694 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800761a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11b      	bne.n	8007658 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	0c5b      	lsrs	r3, r3, #17
 8007624:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007626:	2300      	movs	r3, #0
 8007628:	64bb      	str	r3, [r7, #72]	; 0x48
 800762a:	2301      	movs	r3, #1
 800762c:	653b      	str	r3, [r7, #80]	; 0x50
 800762e:	e005      	b.n	800763c <f_mkfs+0x1d0>
 8007630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007632:	3301      	adds	r3, #1
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
 8007636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	653b      	str	r3, [r7, #80]	; 0x50
 800763c:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <f_mkfs+0x288>)
 800763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <f_mkfs+0x1ec>
 8007648:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <f_mkfs+0x288>)
 800764a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007650:	461a      	mov	r2, r3
 8007652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007654:	4293      	cmp	r3, r2
 8007656:	d2eb      	bcs.n	8007630 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	3302      	adds	r3, #2
 8007666:	009a      	lsls	r2, r3, #2
 8007668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800766a:	4413      	add	r3, r2
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8007676:	2320      	movs	r3, #32
 8007678:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800767a:	2300      	movs	r3, #0
 800767c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007684:	4293      	cmp	r3, r2
 8007686:	d903      	bls.n	8007690 <f_mkfs+0x224>
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <f_mkfs+0x28c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d952      	bls.n	8007736 <f_mkfs+0x2ca>
 8007690:	230e      	movs	r3, #14
 8007692:	e311      	b.n	8007cb8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8007694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007696:	2b00      	cmp	r3, #0
 8007698:	d11b      	bne.n	80076d2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	0b1b      	lsrs	r3, r3, #12
 800769e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80076a0:	2300      	movs	r3, #0
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a4:	2301      	movs	r3, #1
 80076a6:	653b      	str	r3, [r7, #80]	; 0x50
 80076a8:	e005      	b.n	80076b6 <f_mkfs+0x24a>
 80076aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ac:	3301      	adds	r3, #1
 80076ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	653b      	str	r3, [r7, #80]	; 0x50
 80076b6:	4a11      	ldr	r2, [pc, #68]	; (80076fc <f_mkfs+0x290>)
 80076b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <f_mkfs+0x266>
 80076c2:	4a0e      	ldr	r2, [pc, #56]	; (80076fc <f_mkfs+0x290>)
 80076c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d2eb      	bcs.n	80076aa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d90c      	bls.n	8007700 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	3302      	adds	r3, #2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ee:	e012      	b.n	8007716 <f_mkfs+0x2aa>
 80076f0:	20000804 	.word	0x20000804
 80076f4:	08007ee8 	.word	0x08007ee8
 80076f8:	0ffffff5 	.word	0x0ffffff5
 80076fc:	08007ef8 	.word	0x08007ef8
				} else {
					fmt = FS_FAT12;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007706:	6a3a      	ldr	r2, [r7, #32]
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	3301      	adds	r3, #1
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	3303      	adds	r3, #3
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007716:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771a:	4413      	add	r3, r2
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8007726:	2301      	movs	r3, #1
 8007728:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800772a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800773a:	4413      	add	r3, r2
 800773c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800773e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007742:	fb03 f202 	mul.w	r2, r3, r2
 8007746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007748:	4413      	add	r3, r2
 800774a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800774c:	4413      	add	r3, r2
 800774e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	1e5a      	subs	r2, r3, #1
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	425b      	negs	r3, r3
 800775c:	401a      	ands	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8007764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007768:	2b03      	cmp	r3, #3
 800776a:	d108      	bne.n	800777e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800776c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800776e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007770:	4413      	add	r3, r2
 8007772:	657b      	str	r3, [r7, #84]	; 0x54
 8007774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007778:	4413      	add	r3, r2
 800777a:	65bb      	str	r3, [r7, #88]	; 0x58
 800777c:	e006      	b.n	800778c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800777e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007788:	4413      	add	r3, r2
 800778a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800778c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778e:	011a      	lsls	r2, r3, #4
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	441a      	add	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	d901      	bls.n	80077a2 <f_mkfs+0x336>
 800779e:	230e      	movs	r3, #14
 80077a0:	e28a      	b.n	8007cb8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80077be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d10f      	bne.n	80077e6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d80a      	bhi.n	80077e6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <f_mkfs+0x376>
 80077d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	607b      	str	r3, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d144      	bne.n	800786c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80077e2:	230e      	movs	r3, #14
 80077e4:	e268      	b.n	8007cb8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80077e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d133      	bne.n	8007856 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d91e      	bls.n	8007836 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <f_mkfs+0x3a2>
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d803      	bhi.n	800780e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8007806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	e033      	b.n	8007876 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007818:	2303      	movs	r3, #3
 800781a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800781e:	e02a      	b.n	8007876 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d105      	bne.n	8007832 <f_mkfs+0x3c6>
 8007826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d91e      	bls.n	8007870 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8007832:	230e      	movs	r3, #14
 8007834:	e240      	b.n	8007cb8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f640 72f5 	movw	r2, #4085	; 0xff5
 800783c:	4293      	cmp	r3, r2
 800783e:	d80a      	bhi.n	8007856 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d105      	bne.n	8007852 <f_mkfs+0x3e6>
 8007846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	d910      	bls.n	8007874 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8007852:	230e      	movs	r3, #14
 8007854:	e230      	b.n	8007cb8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8007856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800785a:	2b01      	cmp	r3, #1
 800785c:	d10c      	bne.n	8007878 <f_mkfs+0x40c>
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007864:	4293      	cmp	r3, r2
 8007866:	d907      	bls.n	8007878 <f_mkfs+0x40c>
 8007868:	230e      	movs	r3, #14
 800786a:	e225      	b.n	8007cb8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800786c:	bf00      	nop
 800786e:	e6ce      	b.n	800760e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007870:	bf00      	nop
 8007872:	e6cc      	b.n	800760e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007874:	bf00      	nop
			pau = au;
 8007876:	e6ca      	b.n	800760e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007878:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800787a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800787c:	461a      	mov	r2, r3
 800787e:	2100      	movs	r1, #0
 8007880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007882:	f7fd fdd4 	bl	800542e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8007886:	220b      	movs	r2, #11
 8007888:	49b2      	ldr	r1, [pc, #712]	; (8007b54 <f_mkfs+0x6e8>)
 800788a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788c:	f7fd fdae 	bl	80053ec <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	330b      	adds	r3, #11
 8007894:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fd60 	bl	800535e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	330d      	adds	r3, #13
 80078a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	330e      	adds	r3, #14
 80078ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078ae:	b292      	uxth	r2, r2
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd fd53 	bl	800535e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	3310      	adds	r3, #16
 80078bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	f103 0211 	add.w	r2, r3, #17
 80078c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d002      	beq.n	80078d6 <f_mkfs+0x46a>
 80078d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	e000      	b.n	80078d8 <f_mkfs+0x46c>
 80078d6:	2300      	movs	r3, #0
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fd fd3f 	bl	800535e <st_word>
		if (sz_vol < 0x10000) {
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e6:	d208      	bcs.n	80078fa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	3313      	adds	r3, #19
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	b292      	uxth	r2, r2
 80078f0:	4611      	mov	r1, r2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fd fd33 	bl	800535e <st_word>
 80078f8:	e006      	b.n	8007908 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	3320      	adds	r3, #32
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f7fd fd46 	bl	8005394 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	3315      	adds	r3, #21
 800790c:	22f8      	movs	r2, #248	; 0xf8
 800790e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	3318      	adds	r3, #24
 8007914:	213f      	movs	r1, #63	; 0x3f
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fd21 	bl	800535e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	331a      	adds	r3, #26
 8007920:	21ff      	movs	r1, #255	; 0xff
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd fd1b 	bl	800535e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	331c      	adds	r3, #28
 800792c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd fd30 	bl	8005394 <st_dword>
		if (fmt == FS_FAT32) {
 8007934:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007938:	2b03      	cmp	r3, #3
 800793a:	d131      	bne.n	80079a0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8007942:	f7fd f9e3 	bl	8004d0c <get_fattime>
 8007946:	4603      	mov	r3, r0
 8007948:	4619      	mov	r1, r3
 800794a:	4620      	mov	r0, r4
 800794c:	f7fd fd22 	bl	8005394 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd fd1c 	bl	8005394 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	332c      	adds	r3, #44	; 0x2c
 8007960:	2102      	movs	r1, #2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd fd16 	bl	8005394 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	3330      	adds	r3, #48	; 0x30
 800796c:	2101      	movs	r1, #1
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd fcf5 	bl	800535e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	3332      	adds	r3, #50	; 0x32
 8007978:	2106      	movs	r1, #6
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd fcef 	bl	800535e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	3340      	adds	r3, #64	; 0x40
 8007984:	2280      	movs	r2, #128	; 0x80
 8007986:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	3342      	adds	r3, #66	; 0x42
 800798c:	2229      	movs	r2, #41	; 0x29
 800798e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	3347      	adds	r3, #71	; 0x47
 8007994:	2213      	movs	r2, #19
 8007996:	4970      	ldr	r1, [pc, #448]	; (8007b58 <f_mkfs+0x6ec>)
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd fd27 	bl	80053ec <mem_cpy>
 800799e:	e020      	b.n	80079e2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80079a6:	f7fd f9b1 	bl	8004d0c <get_fattime>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4619      	mov	r1, r3
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7fd fcf0 	bl	8005394 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	3316      	adds	r3, #22
 80079b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ba:	b292      	uxth	r2, r2
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fccd 	bl	800535e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	3324      	adds	r3, #36	; 0x24
 80079c8:	2280      	movs	r2, #128	; 0x80
 80079ca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	3326      	adds	r3, #38	; 0x26
 80079d0:	2229      	movs	r2, #41	; 0x29
 80079d2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	332b      	adds	r3, #43	; 0x2b
 80079d8:	2213      	movs	r2, #19
 80079da:	4960      	ldr	r1, [pc, #384]	; (8007b5c <f_mkfs+0x6f0>)
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fd fd05 	bl	80053ec <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fcb6 	bl	800535e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80079f2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80079f6:	2301      	movs	r3, #1
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079fc:	f7fd fc36 	bl	800526c <disk_write>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <f_mkfs+0x59e>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e156      	b.n	8007cb8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8007a0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d140      	bne.n	8007a94 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	1d9a      	adds	r2, r3, #6
 8007a16:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a1e:	f7fd fc25 	bl	800526c <disk_write>
			mem_set(buf, 0, ss);
 8007a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a24:	461a      	mov	r2, r3
 8007a26:	2100      	movs	r1, #0
 8007a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a2a:	f7fd fd00 	bl	800542e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8007a2e:	494c      	ldr	r1, [pc, #304]	; (8007b60 <f_mkfs+0x6f4>)
 8007a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a32:	f7fd fcaf 	bl	8005394 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a3c:	4949      	ldr	r1, [pc, #292]	; (8007b64 <f_mkfs+0x6f8>)
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fca8 	bl	8005394 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7fd fc9f 	bl	8005394 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fc98 	bl	8005394 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a6a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd fc75 	bl	800535e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	1dda      	adds	r2, r3, #7
 8007a78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a80:	f7fd fbf4 	bl	800526c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a90:	f7fd fbec 	bl	800526c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a96:	2100      	movs	r1, #0
 8007a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9a:	f7fd fcc8 	bl	800542e <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aa0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa6:	e04b      	b.n	8007b40 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8007aa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d113      	bne.n	8007ad8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007ab0:	f06f 0107 	mvn.w	r1, #7
 8007ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab6:	f7fd fc6d 	bl	8005394 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	3304      	adds	r3, #4
 8007abe:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd fc66 	bl	8005394 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	3308      	adds	r3, #8
 8007acc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fd fc5f 	bl	8005394 <st_dword>
 8007ad6:	e00b      	b.n	8007af0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <f_mkfs+0x678>
 8007ae0:	4b21      	ldr	r3, [pc, #132]	; (8007b68 <f_mkfs+0x6fc>)
 8007ae2:	e001      	b.n	8007ae8 <f_mkfs+0x67c>
 8007ae4:	f06f 0307 	mvn.w	r3, #7
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aec:	f7fd fc52 	bl	8005394 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007af2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	4293      	cmp	r3, r2
 8007afa:	bf28      	it	cs
 8007afc:	4613      	movcs	r3, r2
 8007afe:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007b00:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b0a:	f7fd fbaf 	bl	800526c <disk_write>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <f_mkfs+0x6ac>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0cf      	b.n	8007cb8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8007b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b20:	f7fd fc85 	bl	800542e <mem_set>
				sect += n; nsect -= n;
 8007b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b28:	4413      	add	r3, r2
 8007b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8007b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8007b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1dc      	bne.n	8007af4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d3af      	bcc.n	8007aa8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007b48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d10d      	bne.n	8007b6c <f_mkfs+0x700>
 8007b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b52:	e00c      	b.n	8007b6e <f_mkfs+0x702>
 8007b54:	08007e08 	.word	0x08007e08
 8007b58:	08007e14 	.word	0x08007e14
 8007b5c:	08007e28 	.word	0x08007e28
 8007b60:	41615252 	.word	0x41615252
 8007b64:	61417272 	.word	0x61417272
 8007b68:	00fffff8 	.word	0x00fffff8
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bf28      	it	cs
 8007b78:	4613      	movcs	r3, r2
 8007b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007b7c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b86:	f7fd fb71 	bl	800526c <disk_write>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <f_mkfs+0x728>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e091      	b.n	8007cb8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8007b94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b98:	4413      	add	r3, r2
 8007b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8007b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e2      	bne.n	8007b70 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007baa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d103      	bne.n	8007bba <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007bb8:	e010      	b.n	8007bdc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc0:	d303      	bcc.n	8007bca <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007bc2:	2306      	movs	r3, #6
 8007bc4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007bc8:	e008      	b.n	8007bdc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007bca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d101      	bne.n	8007bd6 <f_mkfs+0x76a>
 8007bd2:	2304      	movs	r3, #4
 8007bd4:	e000      	b.n	8007bd8 <f_mkfs+0x76c>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d15b      	bne.n	8007c9e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8007be6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007be8:	461a      	mov	r2, r3
 8007bea:	2100      	movs	r1, #0
 8007bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bee:	f7fd fc1e 	bl	800542e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bf8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fd fbae 	bl	800535e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007c08:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3301      	adds	r3, #1
 8007c14:	2201      	movs	r2, #1
 8007c16:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	3303      	adds	r3, #3
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007c30:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	441a      	add	r2, r3
 8007c38:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <f_mkfs+0x854>)
 8007c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	0852      	lsrs	r2, r2, #1
 8007c42:	4413      	add	r3, r2
 8007c44:	0b5b      	lsrs	r3, r3, #13
 8007c46:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	3305      	adds	r3, #5
 8007c4c:	22fe      	movs	r2, #254	; 0xfe
 8007c4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	3306      	adds	r3, #6
 8007c5a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	3307      	adds	r3, #7
 8007c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd fb8e 	bl	8005394 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fd fb87 	bl	8005394 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007c86:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c90:	f7fd faec 	bl	800526c <disk_write>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <f_mkfs+0x832>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e00c      	b.n	8007cb8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007c9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd fb00 	bl	80052ac <disk_ioctl>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <f_mkfs+0x84a>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <f_mkfs+0x84c>

	return FR_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3774      	adds	r7, #116	; 0x74
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}
 8007cc0:	0515565b 	.word	0x0515565b

08007cc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cdc:	7a5b      	ldrb	r3, [r3, #9]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d131      	bne.n	8007d48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007ce6:	7a5b      	ldrb	r3, [r3, #9]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cf4:	7a5b      	ldrb	r3, [r3, #9]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d04:	7a5b      	ldrb	r3, [r3, #9]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	79fa      	ldrb	r2, [r7, #7]
 8007d10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d14:	7a5b      	ldrb	r3, [r3, #9]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	b2d1      	uxtb	r1, r2
 8007d1c:	4a0e      	ldr	r2, [pc, #56]	; (8007d58 <FATFS_LinkDriverEx+0x94>)
 8007d1e:	7251      	strb	r1, [r2, #9]
 8007d20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d22:	7dbb      	ldrb	r3, [r7, #22]
 8007d24:	3330      	adds	r3, #48	; 0x30
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	223a      	movs	r2, #58	; 0x3a
 8007d32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3302      	adds	r3, #2
 8007d38:	222f      	movs	r2, #47	; 0x2f
 8007d3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3303      	adds	r3, #3
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	2000082c 	.word	0x2000082c

08007d5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d66:	2200      	movs	r2, #0
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff ffaa 	bl	8007cc4 <FATFS_LinkDriverEx>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4d0d      	ldr	r5, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1b64      	subs	r4, r4, r5
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2600      	movs	r6, #0
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4d0b      	ldr	r5, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f000 f820 	bl	8007dd4 <_init>
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2600      	movs	r6, #0
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	08007f10 	.word	0x08007f10
 8007db8:	08007f10 	.word	0x08007f10
 8007dbc:	08007f10 	.word	0x08007f10
 8007dc0:	08007f14 	.word	0x08007f14

08007dc4 <memset>:
 8007dc4:	4402      	add	r2, r0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d100      	bne.n	8007dce <memset+0xa>
 8007dcc:	4770      	bx	lr
 8007dce:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd2:	e7f9      	b.n	8007dc8 <memset+0x4>

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr
